<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="614" onload="init(evt)" viewBox="0 0 1200 614" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="614" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="597.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="597.00"> </text><svg id="frames" x="10" width="1180" total_samples="47368"><g><title>`0x7FF9AE94BBB8 (6 samples, 0.01%)</title><rect x="0.0169%" y="389" width="0.0127%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="6"/><text x="0.2669%" y="399.50"></text></g><g><title>`0x7FF9AE8E8842 (8 samples, 0.02%)</title><rect x="0.0148%" y="437" width="0.0169%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="8"/><text x="0.2648%" y="447.50"></text></g><g><title>`0x7FF9AE8ED255 (8 samples, 0.02%)</title><rect x="0.0148%" y="421" width="0.0169%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="8"/><text x="0.2648%" y="431.50"></text></g><g><title>`0x7FF9AE94B611 (7 samples, 0.01%)</title><rect x="0.0169%" y="405" width="0.0148%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="7"/><text x="0.2669%" y="415.50"></text></g><g><title>`0x7FF9ABE12E8D (5 samples, 0.01%)</title><rect x="0.0317%" y="341" width="0.0106%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="5"/><text x="0.2817%" y="351.50"></text></g><g><title>`0x7FF9AE9BB734 (18 samples, 0.04%)</title><rect x="0.0148%" y="485" width="0.0380%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="18"/><text x="0.2648%" y="495.50"></text></g><g><title>`0x7FF9AE935D80 (18 samples, 0.04%)</title><rect x="0.0148%" y="469" width="0.0380%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="18"/><text x="0.2648%" y="479.50"></text></g><g><title>`0x7FF9AE8E84E0 (18 samples, 0.04%)</title><rect x="0.0148%" y="453" width="0.0380%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="18"/><text x="0.2648%" y="463.50"></text></g><g><title>`0x7FF9AE8E88D4 (10 samples, 0.02%)</title><rect x="0.0317%" y="437" width="0.0211%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="10"/><text x="0.2817%" y="447.50"></text></g><g><title>`0x7FF9AE91AE03 (10 samples, 0.02%)</title><rect x="0.0317%" y="421" width="0.0211%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="10"/><text x="0.2817%" y="431.50"></text></g><g><title>`0x7FF9AE91BCA6 (10 samples, 0.02%)</title><rect x="0.0317%" y="405" width="0.0211%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="10"/><text x="0.2817%" y="415.50"></text></g><g><title>`0x7FF9AE91BC7A (10 samples, 0.02%)</title><rect x="0.0317%" y="389" width="0.0211%" height="15" fill="rgb(240,193,28)" fg:x="15" fg:w="10"/><text x="0.2817%" y="399.50"></text></g><g><title>`0x7FF9AE95193C (10 samples, 0.02%)</title><rect x="0.0317%" y="373" width="0.0211%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="10"/><text x="0.2817%" y="383.50"></text></g><g><title>`0x7FF9AE952983 (10 samples, 0.02%)</title><rect x="0.0317%" y="357" width="0.0211%" height="15" fill="rgb(206,188,39)" fg:x="15" fg:w="10"/><text x="0.2817%" y="367.50"></text></g><g><title>`0x7FF9AE94548B (21 samples, 0.04%)</title><rect x="0.0148%" y="501" width="0.0443%" height="15" fill="rgb(217,207,13)" fg:x="7" fg:w="21"/><text x="0.2648%" y="511.50"></text></g><g><title>`0x7FF9AC0EA776 (6 samples, 0.01%)</title><rect x="0.0781%" y="373" width="0.0127%" height="15" fill="rgb(231,73,38)" fg:x="37" fg:w="6"/><text x="0.3281%" y="383.50"></text></g><g><title>`0x7FF9AC0EA906 (6 samples, 0.01%)</title><rect x="0.0781%" y="357" width="0.0127%" height="15" fill="rgb(225,20,46)" fg:x="37" fg:w="6"/><text x="0.3281%" y="367.50"></text></g><g><title>`0x7FF9AC0EAE4A (6 samples, 0.01%)</title><rect x="0.0781%" y="341" width="0.0127%" height="15" fill="rgb(210,31,41)" fg:x="37" fg:w="6"/><text x="0.3281%" y="351.50"></text></g><g><title>`0x7FF9AC0EAFD1 (5 samples, 0.01%)</title><rect x="0.0802%" y="325" width="0.0106%" height="15" fill="rgb(221,200,47)" fg:x="38" fg:w="5"/><text x="0.3302%" y="335.50"></text></g><g><title>`0x7FF9AC0F6E26 (13 samples, 0.03%)</title><rect x="0.0718%" y="405" width="0.0274%" height="15" fill="rgb(226,26,5)" fg:x="34" fg:w="13"/><text x="0.3218%" y="415.50"></text></g><g><title>`0x7FF9AC15AD56 (13 samples, 0.03%)</title><rect x="0.0718%" y="389" width="0.0274%" height="15" fill="rgb(249,33,26)" fg:x="34" fg:w="13"/><text x="0.3218%" y="399.50"></text></g><g><title>`0x7FF9AE9456AC (16 samples, 0.03%)</title><rect x="0.0676%" y="501" width="0.0338%" height="15" fill="rgb(235,183,28)" fg:x="32" fg:w="16"/><text x="0.3176%" y="511.50"></text></g><g><title>`0x7FF9AE91BCA6 (16 samples, 0.03%)</title><rect x="0.0676%" y="485" width="0.0338%" height="15" fill="rgb(221,5,38)" fg:x="32" fg:w="16"/><text x="0.3176%" y="495.50"></text></g><g><title>`0x7FF9AE91BCA6 (15 samples, 0.03%)</title><rect x="0.0697%" y="469" width="0.0317%" height="15" fill="rgb(247,18,42)" fg:x="33" fg:w="15"/><text x="0.3197%" y="479.50"></text></g><g><title>`0x7FF9AE91BC7A (15 samples, 0.03%)</title><rect x="0.0697%" y="453" width="0.0317%" height="15" fill="rgb(241,131,45)" fg:x="33" fg:w="15"/><text x="0.3197%" y="463.50"></text></g><g><title>`0x7FF9AE95193C (15 samples, 0.03%)</title><rect x="0.0697%" y="437" width="0.0317%" height="15" fill="rgb(249,31,29)" fg:x="33" fg:w="15"/><text x="0.3197%" y="447.50"></text></g><g><title>`0x7FF9AE952983 (15 samples, 0.03%)</title><rect x="0.0697%" y="421" width="0.0317%" height="15" fill="rgb(225,111,53)" fg:x="33" fg:w="15"/><text x="0.3197%" y="431.50"></text></g><g><title>`0x7FF9AE915FCE (51 samples, 0.11%)</title><rect x="0.0000%" y="549" width="0.1077%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="51"/><text x="0.2500%" y="559.50"></text></g><g><title>`0x7FF9AE94364E (50 samples, 0.11%)</title><rect x="0.0021%" y="533" width="0.1056%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="50"/><text x="0.2521%" y="543.50"></text></g><g><title>`0x7FF9AE943864 (50 samples, 0.11%)</title><rect x="0.0021%" y="517" width="0.1056%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="50"/><text x="0.2521%" y="527.50"></text></g><g><title>`0x7FF9AE91C320 (7 samples, 0.01%)</title><rect x="0.1077%" y="549" width="0.0148%" height="15" fill="rgb(209,103,24)" fg:x="51" fg:w="7"/><text x="0.3577%" y="559.50"></text></g><g><title>`0x7FF9AE972AA1 (5 samples, 0.01%)</title><rect x="0.1224%" y="517" width="0.0106%" height="15" fill="rgb(229,88,8)" fg:x="58" fg:w="5"/><text x="0.3724%" y="527.50"></text></g><g><title>`0x7FF9AE95B4B0 (5 samples, 0.01%)</title><rect x="0.1224%" y="501" width="0.0106%" height="15" fill="rgb(213,181,19)" fg:x="58" fg:w="5"/><text x="0.3724%" y="511.50"></text></g><g><title>`0x7FF9AC16553D (6 samples, 0.01%)</title><rect x="0.1393%" y="485" width="0.0127%" height="15" fill="rgb(254,191,54)" fg:x="66" fg:w="6"/><text x="0.3893%" y="495.50"></text></g><g><title>`0x7FF9AC0F423B (6 samples, 0.01%)</title><rect x="0.1393%" y="469" width="0.0127%" height="15" fill="rgb(241,83,37)" fg:x="66" fg:w="6"/><text x="0.3893%" y="479.50"></text></g><g><title>`0x7FF9AC156225 (6 samples, 0.01%)</title><rect x="0.1393%" y="453" width="0.0127%" height="15" fill="rgb(233,36,39)" fg:x="66" fg:w="6"/><text x="0.3893%" y="463.50"></text></g><g><title>`0x7FF9ABD028E6 (6 samples, 0.01%)</title><rect x="0.1393%" y="437" width="0.0127%" height="15" fill="rgb(226,3,54)" fg:x="66" fg:w="6"/><text x="0.3893%" y="447.50"></text></g><g><title>`0x7FF9AE935D80 (6 samples, 0.01%)</title><rect x="0.1393%" y="421" width="0.0127%" height="15" fill="rgb(245,192,40)" fg:x="66" fg:w="6"/><text x="0.3893%" y="431.50"></text></g><g><title>`0x7FF9AE8E84E0 (5 samples, 0.01%)</title><rect x="0.1414%" y="405" width="0.0106%" height="15" fill="rgb(238,167,29)" fg:x="67" fg:w="5"/><text x="0.3914%" y="415.50"></text></g><g><title>`0x7FF9AC180046 (7 samples, 0.01%)</title><rect x="0.1393%" y="501" width="0.0148%" height="15" fill="rgb(232,182,51)" fg:x="66" fg:w="7"/><text x="0.3893%" y="511.50"></text></g><g><title>`0x7FF9A3DB0430 (6 samples, 0.01%)</title><rect x="0.3082%" y="309" width="0.0127%" height="15" fill="rgb(231,60,39)" fg:x="146" fg:w="6"/><text x="0.5582%" y="319.50"></text></g><g><title>`0x7FF9A3DB0597 (349 samples, 0.74%)</title><rect x="0.3357%" y="309" width="0.7368%" height="15" fill="rgb(208,69,12)" fg:x="159" fg:w="349"/><text x="0.5857%" y="319.50"></text></g><g><title>`0x7FF9A3DB059B (21 samples, 0.04%)</title><rect x="1.0725%" y="309" width="0.0443%" height="15" fill="rgb(235,93,37)" fg:x="508" fg:w="21"/><text x="1.3225%" y="319.50"></text></g><g><title>`0x7FF9A3DB0682 (5 samples, 0.01%)</title><rect x="1.1316%" y="309" width="0.0106%" height="15" fill="rgb(213,116,39)" fg:x="536" fg:w="5"/><text x="1.3816%" y="319.50"></text></g><g><title>`0x7FF9A3DB06F1 (7 samples, 0.01%)</title><rect x="1.1421%" y="309" width="0.0148%" height="15" fill="rgb(222,207,29)" fg:x="541" fg:w="7"/><text x="1.3921%" y="319.50"></text></g><g><title>`0x7FF9A3DB06F8 (6 samples, 0.01%)</title><rect x="1.1569%" y="309" width="0.0127%" height="15" fill="rgb(206,96,30)" fg:x="548" fg:w="6"/><text x="1.4069%" y="319.50"></text></g><g><title>`0x7FF9A3DB06FF (9 samples, 0.02%)</title><rect x="1.1696%" y="309" width="0.0190%" height="15" fill="rgb(218,138,4)" fg:x="554" fg:w="9"/><text x="1.4196%" y="319.50"></text></g><g><title>`0x7FF9A3DB070A (11 samples, 0.02%)</title><rect x="1.1886%" y="309" width="0.0232%" height="15" fill="rgb(250,191,14)" fg:x="563" fg:w="11"/><text x="1.4386%" y="319.50"></text></g><g><title>`0x7FF9A3DB3010 (11 samples, 0.02%)</title><rect x="1.2181%" y="309" width="0.0232%" height="15" fill="rgb(239,60,40)" fg:x="577" fg:w="11"/><text x="1.4681%" y="319.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::impl$6::clone (11 samples, 0.02%)</title><rect x="1.2413%" y="309" width="0.0232%" height="15" fill="rgb(206,27,48)" fg:x="588" fg:w="11"/><text x="1.4913%" y="319.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_ptr (11 samples, 0.02%)</title><rect x="1.3448%" y="261" width="0.0232%" height="15" fill="rgb(225,35,8)" fg:x="637" fg:w="11"/><text x="1.5948%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::is_valid_allocation_size (59 samples, 0.12%)</title><rect x="1.4651%" y="245" width="0.1246%" height="15" fill="rgb(250,213,24)" fg:x="694" fg:w="59"/><text x="1.7151%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::fmt::Arguments::new_const(ref$ (11 samples, 0.02%)</title><rect x="1.6277%" y="197" width="0.0232%" height="15" fill="rgb(247,123,22)" fg:x="771" fg:w="11"/><text x="1.8777%" y="207.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::impl$8::deref&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;(alloc::vec::Vec (177 samples, 0.37%)</title><rect x="1.3089%" y="293" width="0.3737%" height="15" fill="rgb(231,138,38)" fg:x="620" fg:w="177"/><text x="1.5589%" y="303.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_slice&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt; (174 samples, 0.37%)</title><rect x="1.3152%" y="277" width="0.3673%" height="15" fill="rgb(231,145,46)" fg:x="623" fg:w="174"/><text x="1.5652%" y="287.50"></text></g><g><title>cellular-automaton.exe`core::slice::raw::from_raw_parts::precondition_check(tuple$ (149 samples, 0.31%)</title><rect x="1.3680%" y="261" width="0.3146%" height="15" fill="rgb(251,118,11)" fg:x="648" fg:w="149"/><text x="1.6180%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null(tuple$ (44 samples, 0.09%)</title><rect x="1.5897%" y="245" width="0.0929%" height="15" fill="rgb(217,147,25)" fg:x="753" fg:w="44"/><text x="1.8397%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null::runtime(tuple$ (41 samples, 0.09%)</title><rect x="1.5960%" y="229" width="0.0866%" height="15" fill="rgb(247,81,37)" fg:x="756" fg:w="41"/><text x="1.8460%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::is_aligned_to(tuple$ (35 samples, 0.07%)</title><rect x="1.6087%" y="213" width="0.0739%" height="15" fill="rgb(209,12,38)" fg:x="762" fg:w="35"/><text x="1.8587%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::is_power_of_two (15 samples, 0.03%)</title><rect x="1.6509%" y="197" width="0.0317%" height="15" fill="rgb(227,1,9)" fg:x="782" fg:w="15"/><text x="1.9009%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::count_ones (15 samples, 0.03%)</title><rect x="1.6509%" y="181" width="0.0317%" height="15" fill="rgb(248,47,43)" fg:x="782" fg:w="15"/><text x="1.9009%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::slice::impl$0::iter(ref$&lt;slice2$ (9 samples, 0.02%)</title><rect x="1.7459%" y="261" width="0.0190%" height="15" fill="rgb(221,10,30)" fg:x="827" fg:w="9"/><text x="1.9959%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt;::new(ref$&lt;slice2$ (9 samples, 0.02%)</title><rect x="1.7459%" y="245" width="0.0190%" height="15" fill="rgb(210,229,1)" fg:x="827" fg:w="9"/><text x="1.9959%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::slice::cmp::impl$15::slice_contains::closure$0&lt;cellular_automaton::cell::Cell&gt;(core::slice::cmp::impl$15::slice_contains::closure_env$0 (72 samples, 0.15%)</title><rect x="2.1196%" y="245" width="0.1520%" height="15" fill="rgb(222,148,37)" fg:x="1004" fg:w="72"/><text x="2.3696%" y="255.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::impl$1::eq (42 samples, 0.09%)</title><rect x="2.1829%" y="229" width="0.0887%" height="15" fill="rgb(234,67,33)" fg:x="1034" fg:w="42"/><text x="2.4329%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;cellular_automaton::cell::Cell&gt;*, core::ptr::non_null::NonNull (19 samples, 0.04%)</title><rect x="2.4151%" y="229" width="0.0401%" height="15" fill="rgb(247,98,35)" fg:x="1144" fg:w="19"/><text x="2.6651%" y="239.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::pattern::Pattern::contains (588 samples, 1.24%)</title><rect x="1.2646%" y="309" width="1.2413%" height="15" fill="rgb(247,138,52)" fg:x="599" fg:w="588"/><text x="1.5146%" y="319.50"></text></g><g><title>cellular-automaton.exe`core::slice::impl$0::contains&lt;cellular_automaton::cell::Cell&gt;(ref$&lt;slice2$ (390 samples, 0.82%)</title><rect x="1.6826%" y="293" width="0.8233%" height="15" fill="rgb(213,79,30)" fg:x="797" fg:w="390"/><text x="1.9326%" y="303.50"></text></g><g><title>cellular-automaton.exe`core::slice::cmp::impl$15::slice_contains&lt;cellular_automaton::cell::Cell&gt;(cellular_automaton::cell::Cell*, ref$&lt;slice2$ (379 samples, 0.80%)</title><rect x="1.7058%" y="277" width="0.8001%" height="15" fill="rgb(246,177,23)" fg:x="808" fg:w="379"/><text x="1.9558%" y="287.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::impl$182::any&lt;cellular_automaton::cell::Cell,core::slice::cmp::impl$15::slice_contains::closure_env$0&lt;cellular_automaton::cell::Cell&gt; &gt;(core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt;*, core::slice::cmp::impl$15::slice_contains::closure_env$0 (351 samples, 0.74%)</title><rect x="1.7649%" y="261" width="0.7410%" height="15" fill="rgb(230,62,27)" fg:x="836" fg:w="351"/><text x="2.0149%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::impl$182::next&lt;cellular_automaton::cell::Cell&gt;(core::slice::iter::Iter (111 samples, 0.23%)</title><rect x="2.2716%" y="245" width="0.2343%" height="15" fill="rgb(216,154,8)" fg:x="1076" fg:w="111"/><text x="2.5216%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter (24 samples, 0.05%)</title><rect x="2.4552%" y="229" width="0.0507%" height="15" fill="rgb(244,35,45)" fg:x="1163" fg:w="24"/><text x="2.7052%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt;::post_inc_start (24 samples, 0.05%)</title><rect x="2.4552%" y="213" width="0.0507%" height="15" fill="rgb(251,115,12)" fg:x="1163" fg:w="24"/><text x="2.7052%" y="223.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::len&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt; (380 samples, 0.80%)</title><rect x="29.4186%" y="293" width="0.8022%" height="15" fill="rgb(240,54,50)" fg:x="13935" fg:w="380"/><text x="29.6686%" y="303.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_mut_ptr (7 samples, 0.01%)</title><rect x="31.6332%" y="245" width="0.0148%" height="15" fill="rgb(233,84,52)" fg:x="14984" fg:w="7"/><text x="31.8832%" y="255.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::reserve&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt; (63 samples, 0.13%)</title><rect x="31.6479%" y="245" width="0.1330%" height="15" fill="rgb(207,117,47)" fg:x="14991" fg:w="63"/><text x="31.8979%" y="255.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::reserve (48 samples, 0.10%)</title><rect x="31.6796%" y="229" width="0.1013%" height="15" fill="rgb(249,43,39)" fg:x="15006" fg:w="48"/><text x="31.9296%" y="239.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::reserve (39 samples, 0.08%)</title><rect x="31.6986%" y="213" width="0.0823%" height="15" fill="rgb(209,38,44)" fg:x="15015" fg:w="39"/><text x="31.9486%" y="223.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::needs_to_grow (24 samples, 0.05%)</title><rect x="31.7303%" y="197" width="0.0507%" height="15" fill="rgb(236,212,23)" fg:x="15030" fg:w="24"/><text x="31.9803%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::size (19 samples, 0.04%)</title><rect x="31.7408%" y="181" width="0.0401%" height="15" fill="rgb(242,79,21)" fg:x="15035" fg:w="19"/><text x="31.9908%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::num::niche_types::UsizeNoHighBit::as_inner (5 samples, 0.01%)</title><rect x="31.7704%" y="165" width="0.0106%" height="15" fill="rgb(211,96,35)" fg:x="15049" fg:w="5"/><text x="32.0204%" y="175.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (95 samples, 0.20%)</title><rect x="31.7809%" y="245" width="0.2006%" height="15" fill="rgb(253,215,40)" fg:x="15054" fg:w="95"/><text x="32.0309%" y="255.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::impl$6::clone (262 samples, 0.55%)</title><rect x="31.9878%" y="245" width="0.5531%" height="15" fill="rgb(211,81,21)" fg:x="15152" fg:w="262"/><text x="32.2378%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::iter::range::impl$6::next(core::ops::range::Range (1,225 samples, 2.59%)</title><rect x="32.5410%" y="245" width="2.5861%" height="15" fill="rgb(208,190,38)" fg:x="15414" fg:w="1225"/><text x="32.7910%" y="255.50">ce..</text></g><g><title>cellular-automaton.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (1,225 samples, 2.59%)</title><rect x="32.5410%" y="229" width="2.5861%" height="15" fill="rgb(235,213,38)" fg:x="15414" fg:w="1225"/><text x="32.7910%" y="239.50">ce..</text></g><g><title>cellular-automaton.exe`core::iter::range::impl$43::forward_unchecked (826 samples, 1.74%)</title><rect x="33.3833%" y="213" width="1.7438%" height="15" fill="rgb(237,122,38)" fg:x="15813" fg:w="826"/><text x="33.6333%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::unchecked_add (504 samples, 1.06%)</title><rect x="34.0631%" y="197" width="1.0640%" height="15" fill="rgb(244,218,35)" fg:x="16135" fg:w="504"/><text x="34.3131%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::unchecked_add::precondition_check (342 samples, 0.72%)</title><rect x="34.4051%" y="181" width="0.7220%" height="15" fill="rgb(240,68,47)" fg:x="16297" fg:w="342"/><text x="34.6551%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::overflowing_add (73 samples, 0.15%)</title><rect x="34.9730%" y="165" width="0.1541%" height="15" fill="rgb(210,16,53)" fg:x="16566" fg:w="73"/><text x="35.2230%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::ptr::drop_in_place&lt;alloc::vec::set_len_on_drop::SetLenOnDrop&gt; (20 samples, 0.04%)</title><rect x="35.1271%" y="245" width="0.0422%" height="15" fill="rgb(235,124,12)" fg:x="16639" fg:w="20"/><text x="35.3771%" y="255.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::set_len_on_drop::impl$1::drop (15 samples, 0.03%)</title><rect x="35.1376%" y="229" width="0.0317%" height="15" fill="rgb(224,169,11)" fg:x="16644" fg:w="15"/><text x="35.3876%" y="239.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::extend_with&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt; (2,440 samples, 5.15%)</title><rect x="30.3897%" y="261" width="5.1512%" height="15" fill="rgb(250,166,2)" fg:x="14395" fg:w="2440"/><text x="30.6397%" y="271.50">cellul..</text></g><g><title>cellular-automaton.exe`core::ptr::write (175 samples, 0.37%)</title><rect x="35.1714%" y="245" width="0.3694%" height="15" fill="rgb(242,216,29)" fg:x="16660" fg:w="175"/><text x="35.4214%" y="255.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::needs_to_grow (41 samples, 0.09%)</title><rect x="35.6633%" y="213" width="0.0866%" height="15" fill="rgb(230,116,27)" fg:x="16893" fg:w="41"/><text x="35.9133%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::wrapping_sub (13 samples, 0.03%)</title><rect x="35.7224%" y="197" width="0.0274%" height="15" fill="rgb(228,99,48)" fg:x="16921" fg:w="13"/><text x="35.9724%" y="207.50"></text></g><g><title>`0x7FF9AE8EF23D (7 samples, 0.01%)</title><rect x="36.1320%" y="133" width="0.0148%" height="15" fill="rgb(253,11,6)" fg:x="17115" fg:w="7"/><text x="36.3820%" y="143.50"></text></g><g><title>`0x7FF9AE8EFA60 (5 samples, 0.01%)</title><rect x="36.2544%" y="117" width="0.0106%" height="15" fill="rgb(247,143,39)" fg:x="17173" fg:w="5"/><text x="36.5044%" y="127.50"></text></g><g><title>`0x7FF9AE8EFB09 (5 samples, 0.01%)</title><rect x="36.2882%" y="117" width="0.0106%" height="15" fill="rgb(236,97,10)" fg:x="17189" fg:w="5"/><text x="36.5382%" y="127.50"></text></g><g><title>`0x7FF9AE8EFBAF (7 samples, 0.01%)</title><rect x="36.3515%" y="117" width="0.0148%" height="15" fill="rgb(233,208,19)" fg:x="17219" fg:w="7"/><text x="36.6015%" y="127.50"></text></g><g><title>`0x7FF9AE8EFFFF (57 samples, 0.12%)</title><rect x="36.3790%" y="117" width="0.1203%" height="15" fill="rgb(216,164,2)" fg:x="17232" fg:w="57"/><text x="36.6290%" y="127.50"></text></g><g><title>`0x7FF9AE8F000F (5 samples, 0.01%)</title><rect x="36.4993%" y="117" width="0.0106%" height="15" fill="rgb(220,129,5)" fg:x="17289" fg:w="5"/><text x="36.7493%" y="127.50"></text></g><g><title>`0x7FF9AE8F002D (6 samples, 0.01%)</title><rect x="36.5099%" y="117" width="0.0127%" height="15" fill="rgb(242,17,10)" fg:x="17294" fg:w="6"/><text x="36.7599%" y="127.50"></text></g><g><title>`0x7FF9AE8F0047 (6 samples, 0.01%)</title><rect x="36.5225%" y="117" width="0.0127%" height="15" fill="rgb(242,107,0)" fg:x="17300" fg:w="6"/><text x="36.7725%" y="127.50"></text></g><g><title>`0x7FF9AE8F0062 (7 samples, 0.01%)</title><rect x="36.5352%" y="117" width="0.0148%" height="15" fill="rgb(251,28,31)" fg:x="17306" fg:w="7"/><text x="36.7852%" y="127.50"></text></g><g><title>`0x7FF9AE8EF2A4 (182 samples, 0.38%)</title><rect x="36.1721%" y="133" width="0.3842%" height="15" fill="rgb(233,223,10)" fg:x="17134" fg:w="182"/><text x="36.4221%" y="143.50"></text></g><g><title>`0x7FF9AE8EF384 (5 samples, 0.01%)</title><rect x="36.5795%" y="133" width="0.0106%" height="15" fill="rgb(215,21,27)" fg:x="17327" fg:w="5"/><text x="36.8295%" y="143.50"></text></g><g><title>`0x7FF9AE8EF395 (6 samples, 0.01%)</title><rect x="36.5901%" y="133" width="0.0127%" height="15" fill="rgb(232,23,21)" fg:x="17332" fg:w="6"/><text x="36.8401%" y="143.50"></text></g><g><title>`0x7FF9AE8EF164 (252 samples, 0.53%)</title><rect x="36.0792%" y="149" width="0.5320%" height="15" fill="rgb(244,5,23)" fg:x="17090" fg:w="252"/><text x="36.3292%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::is_power_of_two (25 samples, 0.05%)</title><rect x="36.7548%" y="69" width="0.0528%" height="15" fill="rgb(226,81,46)" fg:x="17410" fg:w="25"/><text x="37.0048%" y="79.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::count_ones (25 samples, 0.05%)</title><rect x="36.7548%" y="53" width="0.0528%" height="15" fill="rgb(247,70,30)" fg:x="17410" fg:w="25"/><text x="37.0048%" y="63.50"></text></g><g><title>cellular-automaton.exe`core::ptr::read_volatile (92 samples, 0.19%)</title><rect x="36.6154%" y="149" width="0.1942%" height="15" fill="rgb(212,68,19)" fg:x="17344" fg:w="92"/><text x="36.8654%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::ptr::read_volatile::precondition_check(tuple$ (85 samples, 0.18%)</title><rect x="36.6302%" y="133" width="0.1794%" height="15" fill="rgb(240,187,13)" fg:x="17351" fg:w="85"/><text x="36.8802%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null(tuple$ (51 samples, 0.11%)</title><rect x="36.7020%" y="117" width="0.1077%" height="15" fill="rgb(223,113,26)" fg:x="17385" fg:w="51"/><text x="36.9520%" y="127.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null::runtime(tuple$ (51 samples, 0.11%)</title><rect x="36.7020%" y="101" width="0.1077%" height="15" fill="rgb(206,192,2)" fg:x="17385" fg:w="51"/><text x="36.9520%" y="111.50"></text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::is_aligned_to(tuple$ (49 samples, 0.10%)</title><rect x="36.7062%" y="85" width="0.1034%" height="15" fill="rgb(241,108,4)" fg:x="17387" fg:w="49"/><text x="36.9562%" y="95.50"></text></g><g><title>cellular-automaton.exe`std::alloc::__default_lib_allocator::__rdl_alloc (13 samples, 0.03%)</title><rect x="36.8097%" y="149" width="0.0274%" height="15" fill="rgb(247,173,49)" fg:x="17436" fg:w="13"/><text x="37.0597%" y="159.50"></text></g><g><title>cellular-automaton.exe`alloc::alloc::alloc (408 samples, 0.86%)</title><rect x="36.0222%" y="165" width="0.8613%" height="15" fill="rgb(224,114,35)" fg:x="17063" fg:w="408"/><text x="36.2722%" y="175.50"></text></g><g><title>cellular-automaton.exe`std::sys::alloc::windows::process_heap_alloc (22 samples, 0.05%)</title><rect x="36.8371%" y="149" width="0.0464%" height="15" fill="rgb(245,159,27)" fg:x="17449" fg:w="22"/><text x="37.0871%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::intrinsics::unlikely (5 samples, 0.01%)</title><rect x="36.8730%" y="133" width="0.0106%" height="15" fill="rgb(245,172,44)" fg:x="17466" fg:w="5"/><text x="37.1230%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::size (12 samples, 0.03%)</title><rect x="36.8836%" y="165" width="0.0253%" height="15" fill="rgb(236,23,11)" fg:x="17471" fg:w="12"/><text x="37.1336%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;u8&gt;::as_ptr(core::ptr::non_null::NonNull (7 samples, 0.01%)</title><rect x="36.9131%" y="149" width="0.0148%" height="15" fill="rgb(205,117,38)" fg:x="17485" fg:w="7"/><text x="37.1631%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;::slice_from_raw_parts(core::ptr::non_null::NonNull (13 samples, 0.03%)</title><rect x="36.9089%" y="165" width="0.0274%" height="15" fill="rgb(237,72,25)" fg:x="17483" fg:w="13"/><text x="37.1589%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;u8&gt;::new_unchecked (6 samples, 0.01%)</title><rect x="36.9469%" y="149" width="0.0127%" height="15" fill="rgb(244,70,9)" fg:x="17501" fg:w="6"/><text x="37.1969%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;u8&gt;::new (17 samples, 0.04%)</title><rect x="36.9363%" y="165" width="0.0359%" height="15" fill="rgb(217,125,39)" fg:x="17496" fg:w="17"/><text x="37.1863%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::impl$3::new_unchecked::precondition_check(tuple$ (6 samples, 0.01%)</title><rect x="36.9596%" y="149" width="0.0127%" height="15" fill="rgb(235,36,10)" fg:x="17507" fg:w="6"/><text x="37.2096%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::impl$3::new_unchecked::precondition_check(tuple$ (5 samples, 0.01%)</title><rect x="36.9722%" y="165" width="0.0106%" height="15" fill="rgb(251,123,47)" fg:x="17513" fg:w="5"/><text x="37.2222%" y="175.50"></text></g><g><title>cellular-automaton.exe`alloc::alloc::impl$1::allocate (504 samples, 1.06%)</title><rect x="35.9272%" y="197" width="1.0640%" height="15" fill="rgb(221,13,13)" fg:x="17018" fg:w="504"/><text x="36.1772%" y="207.50"></text></g><g><title>cellular-automaton.exe`alloc::alloc::Global::alloc_impl (494 samples, 1.04%)</title><rect x="35.9483%" y="181" width="1.0429%" height="15" fill="rgb(238,131,9)" fg:x="17028" fg:w="494"/><text x="36.1983%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::impl$0::from_size_align_unchecked::precondition_check (52 samples, 0.11%)</title><rect x="37.1221%" y="133" width="0.1098%" height="15" fill="rgb(211,50,8)" fg:x="17584" fg:w="52"/><text x="37.3721%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::is_size_align_valid (9 samples, 0.02%)</title><rect x="37.2129%" y="117" width="0.0190%" height="15" fill="rgb(245,182,24)" fg:x="17627" fg:w="9"/><text x="37.4629%" y="127.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::align (67 samples, 0.14%)</title><rect x="37.1052%" y="149" width="0.1414%" height="15" fill="rgb(242,14,37)" fg:x="17576" fg:w="67"/><text x="37.3552%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::ptr::alignment::Alignment::as_usize (7 samples, 0.01%)</title><rect x="37.2319%" y="133" width="0.0148%" height="15" fill="rgb(246,228,12)" fg:x="17636" fg:w="7"/><text x="37.4819%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::pad_to_align (86 samples, 0.18%)</title><rect x="37.1031%" y="165" width="0.1816%" height="15" fill="rgb(213,55,15)" fg:x="17575" fg:w="86"/><text x="37.3531%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::size_rounded_up_to_custom_align (18 samples, 0.04%)</title><rect x="37.2467%" y="149" width="0.0380%" height="15" fill="rgb(209,9,3)" fg:x="17643" fg:w="18"/><text x="37.4967%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::ptr::alignment::Alignment::as_usize (6 samples, 0.01%)</title><rect x="37.2720%" y="133" width="0.0127%" height="15" fill="rgb(230,59,30)" fg:x="17655" fg:w="6"/><text x="37.5220%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::from_size_alignment (7 samples, 0.01%)</title><rect x="37.3501%" y="149" width="0.0148%" height="15" fill="rgb(209,121,21)" fg:x="17692" fg:w="7"/><text x="37.6001%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::repeat (186 samples, 0.39%)</title><rect x="37.0081%" y="181" width="0.3927%" height="15" fill="rgb(220,109,13)" fg:x="17530" fg:w="186"/><text x="37.2581%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::repeat_packed (55 samples, 0.12%)</title><rect x="37.2847%" y="165" width="0.1161%" height="15" fill="rgb(232,18,1)" fg:x="17661" fg:w="55"/><text x="37.5347%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::checked_mul (17 samples, 0.04%)</title><rect x="37.3649%" y="149" width="0.0359%" height="15" fill="rgb(215,41,42)" fg:x="17699" fg:w="17"/><text x="37.6149%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::overflowing_mul (9 samples, 0.02%)</title><rect x="37.3818%" y="133" width="0.0190%" height="15" fill="rgb(224,123,36)" fg:x="17707" fg:w="9"/><text x="37.6318%" y="143.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::layout_array (233 samples, 0.49%)</title><rect x="36.9912%" y="197" width="0.4919%" height="15" fill="rgb(240,125,3)" fg:x="17522" fg:w="233"/><text x="37.2412%" y="207.50"></text></g><g><title>cellular-automaton.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;core::alloc::layout::Layout,usize&gt;,core::alloc::layout::LayoutError&gt; &gt;::map(enum2$&lt;core::result::Result&lt;tuple$ (39 samples, 0.08%)</title><rect x="37.4008%" y="181" width="0.0823%" height="15" fill="rgb(205,98,50)" fg:x="17716" fg:w="39"/><text x="37.6508%" y="191.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in&lt;alloc::alloc::Global&gt; (828 samples, 1.75%)</title><rect x="35.7499%" y="213" width="1.7480%" height="15" fill="rgb(205,185,37)" fg:x="16934" fg:w="828"/><text x="35.9999%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::convert::impl$3::into(enum2$ (7 samples, 0.01%)</title><rect x="37.4831%" y="197" width="0.0148%" height="15" fill="rgb(238,207,15)" fg:x="17755" fg:w="7"/><text x="37.7331%" y="207.50"></text></g><g><title>cellular-automaton.exe`alloc::collections::impl$1::from(enum2$ (5 samples, 0.01%)</title><rect x="37.4873%" y="181" width="0.0106%" height="15" fill="rgb(213,199,42)" fg:x="17757" fg:w="5"/><text x="37.7373%" y="191.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::from_elem&lt;cellular_automaton::cell::Cell&gt; (3,457 samples, 7.30%)</title><rect x="30.2208%" y="293" width="7.2982%" height="15" fill="rgb(235,201,11)" fg:x="14315" fg:w="3457"/><text x="30.4708%" y="303.50">cellular-a..</text></g><g><title>cellular-automaton.exe`alloc::vec::spec_from_elem::impl$0::from_elem&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt; (3,444 samples, 7.27%)</title><rect x="30.2483%" y="277" width="7.2707%" height="15" fill="rgb(207,46,11)" fg:x="14328" fg:w="3444"/><text x="30.4983%" y="287.50">cellular-a..</text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::with_capacity_in (937 samples, 1.98%)</title><rect x="35.5409%" y="261" width="1.9781%" height="15" fill="rgb(241,35,35)" fg:x="16835" fg:w="937"/><text x="35.7909%" y="271.50">c..</text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::with_capacity_in (930 samples, 1.96%)</title><rect x="35.5556%" y="245" width="1.9634%" height="15" fill="rgb(243,32,47)" fg:x="16842" fg:w="930"/><text x="35.8056%" y="255.50">c..</text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in&lt;alloc::alloc::Global&gt; (928 samples, 1.96%)</title><rect x="35.5599%" y="229" width="1.9591%" height="15" fill="rgb(247,202,23)" fg:x="16844" fg:w="928"/><text x="35.8099%" y="239.50">c..</text></g><g><title>cellular-automaton.exe`core::hint::assert_unchecked::precondition_check (10 samples, 0.02%)</title><rect x="37.4979%" y="213" width="0.0211%" height="15" fill="rgb(219,102,11)" fg:x="17762" fg:w="10"/><text x="37.7479%" y="223.50"></text></g><g><title>cellular-automaton.exe`alloc::alloc::impl$3::clone (6 samples, 0.01%)</title><rect x="37.5486%" y="277" width="0.0127%" height="15" fill="rgb(243,110,44)" fg:x="17786" fg:w="6"/><text x="37.7986%" y="287.50"></text></g><g><title>cellular-automaton.exe`core::ptr::slice_from_raw_parts_mut(core::mem::maybe_uninit::MaybeUninit (6 samples, 0.01%)</title><rect x="40.7195%" y="197" width="0.0127%" height="15" fill="rgb(222,74,54)" fg:x="19288" fg:w="6"/><text x="40.9695%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::ptr::metadata::from_raw_parts_mut(core::mem::maybe_uninit::MaybeUninit (6 samples, 0.01%)</title><rect x="40.7195%" y="181" width="0.0127%" height="15" fill="rgb(216,99,12)" fg:x="19288" fg:w="6"/><text x="40.9695%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::is_valid_allocation_size (74 samples, 0.16%)</title><rect x="40.8018%" y="181" width="0.1562%" height="15" fill="rgb(226,22,26)" fg:x="19327" fg:w="74"/><text x="41.0518%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::fmt::Arguments::new_const(ref$ (5 samples, 0.01%)</title><rect x="41.0045%" y="133" width="0.0106%" height="15" fill="rgb(217,163,10)" fg:x="19423" fg:w="5"/><text x="41.2545%" y="143.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::spare_capacity_mut (169 samples, 0.36%)</title><rect x="40.6709%" y="229" width="0.3568%" height="15" fill="rgb(213,25,53)" fg:x="19265" fg:w="169"/><text x="40.9209%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::slice::raw::from_raw_parts_mut(core::mem::maybe_uninit::MaybeUninit (151 samples, 0.32%)</title><rect x="40.7089%" y="213" width="0.3188%" height="15" fill="rgb(252,105,26)" fg:x="19283" fg:w="151"/><text x="40.9589%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::slice::raw::from_raw_parts_mut::precondition_check(tuple$ (140 samples, 0.30%)</title><rect x="40.7321%" y="197" width="0.2956%" height="15" fill="rgb(220,39,43)" fg:x="19294" fg:w="140"/><text x="40.9821%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null(tuple$ (33 samples, 0.07%)</title><rect x="40.9580%" y="181" width="0.0697%" height="15" fill="rgb(229,68,48)" fg:x="19401" fg:w="33"/><text x="41.2080%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null::runtime(tuple$ (31 samples, 0.07%)</title><rect x="40.9623%" y="165" width="0.0654%" height="15" fill="rgb(252,8,32)" fg:x="19403" fg:w="31"/><text x="41.2123%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::is_aligned_to(tuple$ (21 samples, 0.04%)</title><rect x="40.9834%" y="149" width="0.0443%" height="15" fill="rgb(223,20,43)" fg:x="19413" fg:w="21"/><text x="41.2334%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::is_power_of_two (6 samples, 0.01%)</title><rect x="41.0150%" y="133" width="0.0127%" height="15" fill="rgb(229,81,49)" fg:x="19428" fg:w="6"/><text x="41.2650%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::count_ones (6 samples, 0.01%)</title><rect x="41.0150%" y="117" width="0.0127%" height="15" fill="rgb(236,28,36)" fg:x="19428" fg:w="6"/><text x="41.2650%" y="127.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::needs_to_grow (45 samples, 0.10%)</title><rect x="41.1459%" y="197" width="0.0950%" height="15" fill="rgb(249,185,26)" fg:x="19490" fg:w="45"/><text x="41.3959%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::wrapping_sub (19 samples, 0.04%)</title><rect x="41.2008%" y="181" width="0.0401%" height="15" fill="rgb(249,174,33)" fg:x="19516" fg:w="19"/><text x="41.4508%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::num::niche_types::UsizeNoHighBit::as_inner (5 samples, 0.01%)</title><rect x="41.2304%" y="165" width="0.0106%" height="15" fill="rgb(233,201,37)" fg:x="19530" fg:w="5"/><text x="41.4804%" y="175.50"></text></g><g><title>`0x7FF9AE8EE690 (21 samples, 0.04%)</title><rect x="41.5829%" y="133" width="0.0443%" height="15" fill="rgb(221,78,26)" fg:x="19697" fg:w="21"/><text x="41.8329%" y="143.50"></text></g><g><title>`0x7FF9AE8EE695 (20 samples, 0.04%)</title><rect x="41.6273%" y="133" width="0.0422%" height="15" fill="rgb(250,127,30)" fg:x="19718" fg:w="20"/><text x="41.8773%" y="143.50"></text></g><g><title>`0x7FF9AE8EE6C5 (5 samples, 0.01%)</title><rect x="41.6990%" y="133" width="0.0106%" height="15" fill="rgb(230,49,44)" fg:x="19752" fg:w="5"/><text x="41.9490%" y="143.50"></text></g><g><title>`0x7FF9AE8EF1C7 (6 samples, 0.01%)</title><rect x="41.7370%" y="117" width="0.0127%" height="15" fill="rgb(229,67,23)" fg:x="19770" fg:w="6"/><text x="41.9870%" y="127.50"></text></g><g><title>`0x7FF9AE8EF204 (5 samples, 0.01%)</title><rect x="41.7898%" y="117" width="0.0106%" height="15" fill="rgb(249,83,47)" fg:x="19795" fg:w="5"/><text x="42.0398%" y="127.50"></text></g><g><title>`0x7FF9AE8EF23D (5 samples, 0.01%)</title><rect x="41.8088%" y="117" width="0.0106%" height="15" fill="rgb(215,43,3)" fg:x="19804" fg:w="5"/><text x="42.0588%" y="127.50"></text></g><g><title>`0x7FF9AE8EFA31 (7 samples, 0.01%)</title><rect x="41.9693%" y="101" width="0.0148%" height="15" fill="rgb(238,154,13)" fg:x="19880" fg:w="7"/><text x="42.2193%" y="111.50"></text></g><g><title>`0x7FF9AE8EFA96 (5 samples, 0.01%)</title><rect x="42.0199%" y="101" width="0.0106%" height="15" fill="rgb(219,56,2)" fg:x="19904" fg:w="5"/><text x="42.2699%" y="111.50"></text></g><g><title>`0x7FF9AE8EFAD6 (8 samples, 0.02%)</title><rect x="42.0305%" y="101" width="0.0169%" height="15" fill="rgb(233,0,4)" fg:x="19909" fg:w="8"/><text x="42.2805%" y="111.50"></text></g><g><title>`0x7FF9AE8EFB1E (5 samples, 0.01%)</title><rect x="42.0579%" y="101" width="0.0106%" height="15" fill="rgb(235,30,7)" fg:x="19922" fg:w="5"/><text x="42.3079%" y="111.50"></text></g><g><title>`0x7FF9AE8EFBC0 (5 samples, 0.01%)</title><rect x="42.1403%" y="101" width="0.0106%" height="15" fill="rgb(250,79,13)" fg:x="19961" fg:w="5"/><text x="42.3903%" y="111.50"></text></g><g><title>`0x7FF9AE8EFFFF (52 samples, 0.11%)</title><rect x="42.1635%" y="101" width="0.1098%" height="15" fill="rgb(211,146,34)" fg:x="19972" fg:w="52"/><text x="42.4135%" y="111.50"></text></g><g><title>`0x7FF9AE8F0047 (5 samples, 0.01%)</title><rect x="42.2817%" y="101" width="0.0106%" height="15" fill="rgb(228,22,38)" fg:x="20028" fg:w="5"/><text x="42.5317%" y="111.50"></text></g><g><title>`0x7FF9AE8EF2A4 (217 samples, 0.46%)</title><rect x="41.8637%" y="117" width="0.4581%" height="15" fill="rgb(235,168,5)" fg:x="19830" fg:w="217"/><text x="42.1137%" y="127.50"></text></g><g><title>`0x7FF9AE8EF164 (303 samples, 0.64%)</title><rect x="41.7180%" y="133" width="0.6397%" height="15" fill="rgb(221,155,16)" fg:x="19761" fg:w="303"/><text x="41.9680%" y="143.50"></text></g><g><title>`0x7FF9AE8EF172 (7 samples, 0.01%)</title><rect x="42.3577%" y="133" width="0.0148%" height="15" fill="rgb(215,215,53)" fg:x="20064" fg:w="7"/><text x="42.6077%" y="143.50"></text></g><g><title>`0x7FF9AE8EF17F (7 samples, 0.01%)</title><rect x="42.3725%" y="133" width="0.0148%" height="15" fill="rgb(223,4,10)" fg:x="20071" fg:w="7"/><text x="42.6225%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::is_power_of_two (35 samples, 0.07%)</title><rect x="42.5034%" y="53" width="0.0739%" height="15" fill="rgb(234,103,6)" fg:x="20133" fg:w="35"/><text x="42.7534%" y="63.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::count_ones (35 samples, 0.07%)</title><rect x="42.5034%" y="37" width="0.0739%" height="15" fill="rgb(227,97,0)" fg:x="20133" fg:w="35"/><text x="42.7534%" y="47.50"></text></g><g><title>cellular-automaton.exe`core::ptr::read_volatile (90 samples, 0.19%)</title><rect x="42.3915%" y="133" width="0.1900%" height="15" fill="rgb(234,150,53)" fg:x="20080" fg:w="90"/><text x="42.6415%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::ptr::read_volatile::precondition_check(tuple$ (84 samples, 0.18%)</title><rect x="42.4042%" y="117" width="0.1773%" height="15" fill="rgb(228,201,54)" fg:x="20086" fg:w="84"/><text x="42.6542%" y="127.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null(tuple$ (61 samples, 0.13%)</title><rect x="42.4527%" y="101" width="0.1288%" height="15" fill="rgb(222,22,37)" fg:x="20109" fg:w="61"/><text x="42.7027%" y="111.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null::runtime(tuple$ (61 samples, 0.13%)</title><rect x="42.4527%" y="85" width="0.1288%" height="15" fill="rgb(237,53,32)" fg:x="20109" fg:w="61"/><text x="42.7027%" y="95.50"></text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::is_aligned_to(tuple$ (58 samples, 0.12%)</title><rect x="42.4590%" y="69" width="0.1224%" height="15" fill="rgb(233,25,53)" fg:x="20112" fg:w="58"/><text x="42.7090%" y="79.50"></text></g><g><title>cellular-automaton.exe`std::alloc::__default_lib_allocator::__rdl_alloc (13 samples, 0.03%)</title><rect x="42.5815%" y="133" width="0.0274%" height="15" fill="rgb(210,40,34)" fg:x="20170" fg:w="13"/><text x="42.8315%" y="143.50"></text></g><g><title>cellular-automaton.exe`std::sys::alloc::windows::impl$0::alloc (5 samples, 0.01%)</title><rect x="42.5984%" y="117" width="0.0106%" height="15" fill="rgb(241,220,44)" fg:x="20178" fg:w="5"/><text x="42.8484%" y="127.50"></text></g><g><title>cellular-automaton.exe`std::sys::alloc::windows::allocate (5 samples, 0.01%)</title><rect x="42.5984%" y="101" width="0.0106%" height="15" fill="rgb(235,28,35)" fg:x="20178" fg:w="5"/><text x="42.8484%" y="111.50"></text></g><g><title>`0x7FF9ADE93F90 (11 samples, 0.02%)</title><rect x="42.6364%" y="101" width="0.0232%" height="15" fill="rgb(210,56,17)" fg:x="20196" fg:w="11"/><text x="42.8864%" y="111.50"></text></g><g><title>cellular-automaton.exe`alloc::alloc::alloc (536 samples, 1.13%)</title><rect x="41.5365%" y="149" width="1.1316%" height="15" fill="rgb(224,130,29)" fg:x="19675" fg:w="536"/><text x="41.7865%" y="159.50"></text></g><g><title>cellular-automaton.exe`std::sys::alloc::windows::process_heap_alloc (28 samples, 0.06%)</title><rect x="42.6089%" y="133" width="0.0591%" height="15" fill="rgb(235,212,8)" fg:x="20183" fg:w="28"/><text x="42.8589%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::intrinsics::unlikely (15 samples, 0.03%)</title><rect x="42.6364%" y="117" width="0.0317%" height="15" fill="rgb(223,33,50)" fg:x="20196" fg:w="15"/><text x="42.8864%" y="127.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;u8&gt;::as_ptr(core::ptr::non_null::NonNull (10 samples, 0.02%)</title><rect x="42.6786%" y="133" width="0.0211%" height="15" fill="rgb(219,149,13)" fg:x="20216" fg:w="10"/><text x="42.9286%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::ptr::metadata::from_raw_parts_mut (5 samples, 0.01%)</title><rect x="42.6892%" y="117" width="0.0106%" height="15" fill="rgb(250,156,29)" fg:x="20221" fg:w="5"/><text x="42.9392%" y="127.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;slice2$&lt;u8&gt; &gt;::slice_from_raw_parts(core::ptr::non_null::NonNull (18 samples, 0.04%)</title><rect x="42.6744%" y="149" width="0.0380%" height="15" fill="rgb(216,193,19)" fg:x="20214" fg:w="18"/><text x="42.9244%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::ptr::slice_from_raw_parts_mut (6 samples, 0.01%)</title><rect x="42.6997%" y="133" width="0.0127%" height="15" fill="rgb(216,135,14)" fg:x="20226" fg:w="6"/><text x="42.9497%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;u8&gt;::new_unchecked (10 samples, 0.02%)</title><rect x="42.7377%" y="133" width="0.0211%" height="15" fill="rgb(241,47,5)" fg:x="20244" fg:w="10"/><text x="42.9877%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;u8&gt;::new (28 samples, 0.06%)</title><rect x="42.7124%" y="149" width="0.0591%" height="15" fill="rgb(233,42,35)" fg:x="20232" fg:w="28"/><text x="42.9624%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::impl$3::new_unchecked::precondition_check(tuple$ (6 samples, 0.01%)</title><rect x="42.7588%" y="133" width="0.0127%" height="15" fill="rgb(231,13,6)" fg:x="20254" fg:w="6"/><text x="43.0088%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::impl$3::new_unchecked::precondition_check(tuple$ (7 samples, 0.01%)</title><rect x="42.7715%" y="149" width="0.0148%" height="15" fill="rgb(207,181,40)" fg:x="20260" fg:w="7"/><text x="43.0215%" y="159.50"></text></g><g><title>cellular-automaton.exe`alloc::alloc::impl$1::allocate (663 samples, 1.40%)</title><rect x="41.4267%" y="181" width="1.3997%" height="15" fill="rgb(254,173,49)" fg:x="19623" fg:w="663"/><text x="41.6767%" y="191.50"></text></g><g><title>cellular-automaton.exe`alloc::alloc::Global::alloc_impl (647 samples, 1.37%)</title><rect x="41.4605%" y="165" width="1.3659%" height="15" fill="rgb(221,1,38)" fg:x="19639" fg:w="647"/><text x="41.7105%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::result::impl$26::branch(enum2$&lt;core::result::Result&lt;core::ptr::non_null::NonNull (19 samples, 0.04%)</title><rect x="42.7863%" y="149" width="0.0401%" height="15" fill="rgb(206,124,46)" fg:x="20267" fg:w="19"/><text x="43.0363%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::impl$0::from_size_align_unchecked::precondition_check (49 samples, 0.10%)</title><rect x="42.9742%" y="117" width="0.1034%" height="15" fill="rgb(249,21,11)" fg:x="20356" fg:w="49"/><text x="43.2242%" y="127.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::is_size_align_valid (10 samples, 0.02%)</title><rect x="43.0565%" y="101" width="0.0211%" height="15" fill="rgb(222,201,40)" fg:x="20395" fg:w="10"/><text x="43.3065%" y="111.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::align (60 samples, 0.13%)</title><rect x="42.9573%" y="133" width="0.1267%" height="15" fill="rgb(235,61,29)" fg:x="20348" fg:w="60"/><text x="43.2073%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::pad_to_align (75 samples, 0.16%)</title><rect x="42.9573%" y="149" width="0.1583%" height="15" fill="rgb(219,207,3)" fg:x="20348" fg:w="75"/><text x="43.2073%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::size_rounded_up_to_custom_align (15 samples, 0.03%)</title><rect x="43.0839%" y="133" width="0.0317%" height="15" fill="rgb(222,56,46)" fg:x="20408" fg:w="15"/><text x="43.3339%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::from_size_alignment (5 samples, 0.01%)</title><rect x="43.1789%" y="133" width="0.0106%" height="15" fill="rgb(239,76,54)" fg:x="20453" fg:w="5"/><text x="43.4289%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::repeat (176 samples, 0.37%)</title><rect x="42.8369%" y="165" width="0.3716%" height="15" fill="rgb(231,124,27)" fg:x="20291" fg:w="176"/><text x="43.0869%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::repeat_packed (44 samples, 0.09%)</title><rect x="43.1156%" y="149" width="0.0929%" height="15" fill="rgb(249,195,6)" fg:x="20423" fg:w="44"/><text x="43.3656%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::checked_mul (9 samples, 0.02%)</title><rect x="43.1895%" y="133" width="0.0190%" height="15" fill="rgb(237,174,47)" fg:x="20458" fg:w="9"/><text x="43.4395%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::overflowing_mul (5 samples, 0.01%)</title><rect x="43.1979%" y="117" width="0.0106%" height="15" fill="rgb(206,201,31)" fg:x="20462" fg:w="5"/><text x="43.4479%" y="127.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::layout_array (221 samples, 0.47%)</title><rect x="42.8264%" y="181" width="0.4666%" height="15" fill="rgb(231,57,52)" fg:x="20286" fg:w="221"/><text x="43.0764%" y="191.50"></text></g><g><title>cellular-automaton.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;core::alloc::layout::Layout,usize&gt;,core::alloc::layout::LayoutError&gt; &gt;::map(enum2$&lt;core::result::Result&lt;tuple$ (40 samples, 0.08%)</title><rect x="43.2085%" y="165" width="0.0844%" height="15" fill="rgb(248,177,22)" fg:x="20467" fg:w="40"/><text x="43.4585%" y="175.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::try_allocate_in&lt;alloc::alloc::Global&gt; (978 samples, 2.06%)</title><rect x="41.2409%" y="197" width="2.0647%" height="15" fill="rgb(215,211,37)" fg:x="19535" fg:w="978"/><text x="41.4909%" y="207.50">c..</text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::with_capacity_in (1,095 samples, 2.31%)</title><rect x="41.0277%" y="229" width="2.3117%" height="15" fill="rgb(241,128,51)" fg:x="19434" fg:w="1095"/><text x="41.2777%" y="239.50">c..</text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::with_capacity_in&lt;alloc::alloc::Global&gt; (1,091 samples, 2.30%)</title><rect x="41.0361%" y="213" width="2.3032%" height="15" fill="rgb(227,165,31)" fg:x="19438" fg:w="1091"/><text x="41.2861%" y="223.50">c..</text></g><g><title>cellular-automaton.exe`core::hint::assert_unchecked::precondition_check (16 samples, 0.03%)</title><rect x="43.3056%" y="197" width="0.0338%" height="15" fill="rgb(228,167,24)" fg:x="20513" fg:w="16"/><text x="43.5556%" y="207.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::impl$6::clone (429 samples, 0.91%)</title><rect x="43.3394%" y="229" width="0.9057%" height="15" fill="rgb(228,143,12)" fg:x="20529" fg:w="429"/><text x="43.5894%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::option::impl$39::branch(enum2$&lt;core::option::Option&lt;ref$ (270 samples, 0.57%)</title><rect x="47.3189%" y="197" width="0.5700%" height="15" fill="rgb(249,149,8)" fg:x="22414" fg:w="270"/><text x="47.5689%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;cellular_automaton::cell::Cell&gt;*, core::ptr::non_null::NonNull (242 samples, 0.51%)</title><rect x="49.0225%" y="181" width="0.5109%" height="15" fill="rgb(243,35,44)" fg:x="23221" fg:w="242"/><text x="49.2725%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::ptr::mut_ptr::impl$0::cast (61 samples, 0.13%)</title><rect x="50.2977%" y="149" width="0.1288%" height="15" fill="rgb(246,89,9)" fg:x="23825" fg:w="61"/><text x="50.5477%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::iter::adapters::take::impl$1::next(core::iter::adapters::take::Take&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter (2,929 samples, 6.18%)</title><rect x="44.2451%" y="229" width="6.1835%" height="15" fill="rgb(233,213,13)" fg:x="20958" fg:w="2929"/><text x="44.4951%" y="239.50">cellular..</text></g><g><title>cellular-automaton.exe`core::iter::adapters::enumerate::impl$1::next&lt;core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt; &gt;(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter (2,548 samples, 5.38%)</title><rect x="45.0494%" y="213" width="5.3792%" height="15" fill="rgb(233,141,41)" fg:x="21339" fg:w="2548"/><text x="45.2994%" y="223.50">cellula..</text></g><g><title>cellular-automaton.exe`core::slice::iter::impl$182::next&lt;cellular_automaton::cell::Cell&gt;(core::slice::iter::Iter (1,203 samples, 2.54%)</title><rect x="47.8889%" y="197" width="2.5397%" height="15" fill="rgb(239,167,4)" fg:x="22684" fg:w="1203"/><text x="48.1389%" y="207.50">ce..</text></g><g><title>cellular-automaton.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter (424 samples, 0.90%)</title><rect x="49.5334%" y="181" width="0.8951%" height="15" fill="rgb(209,217,16)" fg:x="23463" fg:w="424"/><text x="49.7834%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt;::post_inc_start (416 samples, 0.88%)</title><rect x="49.5503%" y="165" width="0.8782%" height="15" fill="rgb(219,88,35)" fg:x="23471" fg:w="416"/><text x="49.8003%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::mem::maybe_uninit::MaybeUninit&lt;cellular_automaton::cell::Cell&gt;::write (519 samples, 1.10%)</title><rect x="50.4286%" y="229" width="1.0957%" height="15" fill="rgb(220,193,23)" fg:x="23887" fg:w="519"/><text x="50.6786%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::mem::maybe_uninit::MaybeUninit&lt;cellular_automaton::cell::Cell&gt;::new (188 samples, 0.40%)</title><rect x="51.1273%" y="213" width="0.3969%" height="15" fill="rgb(230,90,52)" fg:x="24218" fg:w="188"/><text x="51.3773%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt; &gt;::new(core::slice::iter::Iter (7 samples, 0.01%)</title><rect x="51.5242%" y="213" width="0.0148%" height="15" fill="rgb(252,106,19)" fg:x="24406" fg:w="7"/><text x="51.7742%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::iter::adapters::take::Take&lt;core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt; &gt; &gt;::new(core::iter::adapters::enumerate::Enumerate&lt;core::slice::iter::Iter (22 samples, 0.05%)</title><rect x="51.5390%" y="213" width="0.0464%" height="15" fill="rgb(206,74,20)" fg:x="24413" fg:w="22"/><text x="51.7890%" y="223.50"></text></g><g><title>cellular-automaton.exe`alloc::slice::hack::to_vec(ref$&lt;slice2$ (6,653 samples, 14.05%)</title><rect x="37.5676%" y="261" width="14.0453%" height="15" fill="rgb(230,138,44)" fg:x="17795" fg:w="6653"/><text x="37.8176%" y="271.50">cellular-automaton.ex..</text></g><g><title>cellular-automaton.exe`alloc::slice::hack::impl$0::to_vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;(ref$&lt;slice2$ (6,649 samples, 14.04%)</title><rect x="37.5760%" y="245" width="14.0369%" height="15" fill="rgb(235,182,43)" fg:x="17799" fg:w="6649"/><text x="37.8260%" y="255.50">cellular-automaton.ex..</text></g><g><title>cellular-automaton.exe`core::slice::impl$0::iter(ref$&lt;slice2$ (42 samples, 0.09%)</title><rect x="51.5242%" y="229" width="0.0887%" height="15" fill="rgb(242,16,51)" fg:x="24406" fg:w="42"/><text x="51.7742%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt;::new(ref$&lt;slice2$ (13 samples, 0.03%)</title><rect x="51.5855%" y="213" width="0.0274%" height="15" fill="rgb(248,9,4)" fg:x="24435" fg:w="13"/><text x="51.8355%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::impl$20::from(ref$&lt;slice2$ (5 samples, 0.01%)</title><rect x="51.6023%" y="197" width="0.0106%" height="15" fill="rgb(210,31,22)" fg:x="24443" fg:w="5"/><text x="51.8523%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::is_valid_allocation_size (78 samples, 0.16%)</title><rect x="51.6931%" y="181" width="0.1647%" height="15" fill="rgb(239,54,39)" fg:x="24486" fg:w="78"/><text x="51.9431%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::fmt::Arguments::new_const(ref$ (5 samples, 0.01%)</title><rect x="51.8916%" y="133" width="0.0106%" height="15" fill="rgb(230,99,41)" fg:x="24580" fg:w="5"/><text x="52.1416%" y="143.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::impl$11::clone&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;(alloc::vec::Vec (6,827 samples, 14.41%)</title><rect x="37.5190%" y="293" width="14.4127%" height="15" fill="rgb(253,106,12)" fg:x="17772" fg:w="6827"/><text x="37.7690%" y="303.50">cellular-automaton.exe..</text></g><g><title>cellular-automaton.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (6,804 samples, 14.36%)</title><rect x="37.5676%" y="277" width="14.3641%" height="15" fill="rgb(213,46,41)" fg:x="17795" fg:w="6804"/><text x="37.8176%" y="287.50">cellular-automaton.exe..</text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_slice (151 samples, 0.32%)</title><rect x="51.6129%" y="261" width="0.3188%" height="15" fill="rgb(215,133,35)" fg:x="24448" fg:w="151"/><text x="51.8629%" y="271.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_ptr (150 samples, 0.32%)</title><rect x="51.6150%" y="245" width="0.3167%" height="15" fill="rgb(213,28,5)" fg:x="24449" fg:w="150"/><text x="51.8650%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::ptr::slice_from_raw_parts (141 samples, 0.30%)</title><rect x="51.6340%" y="229" width="0.2977%" height="15" fill="rgb(215,77,49)" fg:x="24458" fg:w="141"/><text x="51.8840%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::ptr::metadata::from_raw_parts (141 samples, 0.30%)</title><rect x="51.6340%" y="213" width="0.2977%" height="15" fill="rgb(248,100,22)" fg:x="24458" fg:w="141"/><text x="51.8840%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::slice::raw::from_raw_parts::precondition_check(tuple$ (132 samples, 0.28%)</title><rect x="51.6530%" y="197" width="0.2787%" height="15" fill="rgb(208,67,9)" fg:x="24467" fg:w="132"/><text x="51.9030%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null(tuple$ (35 samples, 0.07%)</title><rect x="51.8578%" y="181" width="0.0739%" height="15" fill="rgb(219,133,21)" fg:x="24564" fg:w="35"/><text x="52.1078%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null::runtime(tuple$ (32 samples, 0.07%)</title><rect x="51.8641%" y="165" width="0.0676%" height="15" fill="rgb(246,46,29)" fg:x="24567" fg:w="32"/><text x="52.1141%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::is_aligned_to(tuple$ (25 samples, 0.05%)</title><rect x="51.8789%" y="149" width="0.0528%" height="15" fill="rgb(246,185,52)" fg:x="24574" fg:w="25"/><text x="52.1289%" y="159.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::is_power_of_two (14 samples, 0.03%)</title><rect x="51.9021%" y="133" width="0.0296%" height="15" fill="rgb(252,136,11)" fg:x="24585" fg:w="14"/><text x="52.1521%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::count_ones (14 samples, 0.03%)</title><rect x="51.9021%" y="117" width="0.0296%" height="15" fill="rgb(219,138,53)" fg:x="24585" fg:w="14"/><text x="52.1521%" y="127.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::ptr (61 samples, 0.13%)</title><rect x="54.0491%" y="229" width="0.1288%" height="15" fill="rgb(211,51,23)" fg:x="25602" fg:w="61"/><text x="54.2991%" y="239.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (61 samples, 0.13%)</title><rect x="54.0491%" y="213" width="0.1288%" height="15" fill="rgb(247,221,28)" fg:x="25602" fg:w="61"/><text x="54.2991%" y="223.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (61 samples, 0.13%)</title><rect x="54.0491%" y="197" width="0.1288%" height="15" fill="rgb(251,222,45)" fg:x="25602" fg:w="61"/><text x="54.2991%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::is_valid_allocation_size (4,379 samples, 9.24%)</title><rect x="57.5367%" y="181" width="9.2446%" height="15" fill="rgb(217,162,53)" fg:x="27254" fg:w="4379"/><text x="57.7867%" y="191.50">cellular-auto..</text></g><g><title>cellular-automaton.exe`core::fmt::Arguments::new_const(ref$ (78 samples, 0.16%)</title><rect x="68.0079%" y="133" width="0.1647%" height="15" fill="rgb(229,93,14)" fg:x="32214" fg:w="78"/><text x="68.2579%" y="143.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::is_power_of_two (944 samples, 1.99%)</title><rect x="68.1726%" y="133" width="1.9929%" height="15" fill="rgb(209,67,49)" fg:x="32292" fg:w="944"/><text x="68.4226%" y="143.50">c..</text></g><g><title>cellular-automaton.exe`core::num::impl$11::count_ones (944 samples, 1.99%)</title><rect x="68.1726%" y="117" width="1.9929%" height="15" fill="rgb(213,87,29)" fg:x="32292" fg:w="944"/><text x="68.4226%" y="127.50">c..</text></g><g><title>cellular-automaton.exe`alloc::vec::impl$8::deref(alloc::vec::Vec (8,190 samples, 17.29%)</title><rect x="53.0632%" y="277" width="17.2902%" height="15" fill="rgb(205,151,52)" fg:x="25135" fg:w="8190"/><text x="53.3132%" y="287.50">cellular-automaton.exe`allo..</text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_slice (8,190 samples, 17.29%)</title><rect x="53.0632%" y="261" width="17.2902%" height="15" fill="rgb(253,215,39)" fg:x="25135" fg:w="8190"/><text x="53.3132%" y="271.50">cellular-automaton.exe`allo..</text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_ptr (8,052 samples, 17.00%)</title><rect x="53.3546%" y="245" width="16.9988%" height="15" fill="rgb(221,220,41)" fg:x="25273" fg:w="8052"/><text x="53.6046%" y="255.50">cellular-automaton.exe`all..</text></g><g><title>cellular-automaton.exe`core::ptr::slice_from_raw_parts (7,662 samples, 16.18%)</title><rect x="54.1779%" y="229" width="16.1755%" height="15" fill="rgb(218,133,21)" fg:x="25663" fg:w="7662"/><text x="54.4279%" y="239.50">cellular-automaton.exe`co..</text></g><g><title>cellular-automaton.exe`core::ptr::metadata::from_raw_parts (7,662 samples, 16.18%)</title><rect x="54.1779%" y="213" width="16.1755%" height="15" fill="rgb(221,193,43)" fg:x="25663" fg:w="7662"/><text x="54.4279%" y="223.50">cellular-automaton.exe`co..</text></g><g><title>cellular-automaton.exe`core::slice::raw::from_raw_parts::precondition_check(tuple$ (7,299 samples, 15.41%)</title><rect x="54.9443%" y="197" width="15.4091%" height="15" fill="rgb(240,128,52)" fg:x="26026" fg:w="7299"/><text x="55.1943%" y="207.50">cellular-automaton.exe`c..</text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null(tuple$ (1,692 samples, 3.57%)</title><rect x="66.7814%" y="181" width="3.5720%" height="15" fill="rgb(253,114,12)" fg:x="31633" fg:w="1692"/><text x="67.0314%" y="191.50">cell..</text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null::runtime(tuple$ (1,611 samples, 3.40%)</title><rect x="66.9524%" y="165" width="3.4010%" height="15" fill="rgb(215,223,47)" fg:x="31714" fg:w="1611"/><text x="67.2024%" y="175.50">cel..</text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::is_aligned_to(tuple$ (1,440 samples, 3.04%)</title><rect x="67.3134%" y="149" width="3.0400%" height="15" fill="rgb(248,225,23)" fg:x="31885" fg:w="1440"/><text x="67.5634%" y="159.50">cel..</text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::is_null::runtime (89 samples, 0.19%)</title><rect x="70.1655%" y="133" width="0.1879%" height="15" fill="rgb(250,108,0)" fg:x="33236" fg:w="89"/><text x="70.4155%" y="143.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::impl$13::index&lt;cellular_automaton::cell::Cell,usize,alloc::alloc::Global&gt;(alloc::vec::Vec (9,539 samples, 20.14%)</title><rect x="51.9317%" y="293" width="20.1381%" height="15" fill="rgb(228,208,7)" fg:x="24599" fg:w="9539"/><text x="52.1817%" y="303.50">cellular-automaton.exe`alloc::ve..</text></g><g><title>cellular-automaton.exe`core::slice::index::impl$2::index&lt;cellular_automaton::cell::Cell&gt;(unsigned long long, ref$&lt;slice2$ (813 samples, 1.72%)</title><rect x="70.3534%" y="277" width="1.7163%" height="15" fill="rgb(244,45,10)" fg:x="33325" fg:w="813"/><text x="70.6034%" y="287.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::ptr (74 samples, 0.16%)</title><rect x="73.2520%" y="229" width="0.1562%" height="15" fill="rgb(207,125,25)" fg:x="34698" fg:w="74"/><text x="73.5020%" y="239.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (74 samples, 0.16%)</title><rect x="73.2520%" y="213" width="0.1562%" height="15" fill="rgb(210,195,18)" fg:x="34698" fg:w="74"/><text x="73.5020%" y="223.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (74 samples, 0.16%)</title><rect x="73.2520%" y="197" width="0.1562%" height="15" fill="rgb(249,80,12)" fg:x="34698" fg:w="74"/><text x="73.5020%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::is_valid_allocation_size (2,203 samples, 4.65%)</title><rect x="74.7488%" y="213" width="4.6508%" height="15" fill="rgb(221,65,9)" fg:x="35407" fg:w="2203"/><text x="74.9988%" y="223.50">cellu..</text></g><g><title>cellular-automaton.exe`core::fmt::Arguments::new_const(ref$ (80 samples, 0.17%)</title><rect x="80.2715%" y="165" width="0.1689%" height="15" fill="rgb(235,49,36)" fg:x="38023" fg:w="80"/><text x="80.5215%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::is_power_of_two (457 samples, 0.96%)</title><rect x="80.4404%" y="165" width="0.9648%" height="15" fill="rgb(225,32,20)" fg:x="38103" fg:w="457"/><text x="80.6904%" y="175.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::count_ones (457 samples, 0.96%)</title><rect x="80.4404%" y="149" width="0.9648%" height="15" fill="rgb(215,141,46)" fg:x="38103" fg:w="457"/><text x="80.6904%" y="159.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::impl$9::deref_mut(alloc::vec::Vec (4,244 samples, 8.96%)</title><rect x="72.5173%" y="277" width="8.9596%" height="15" fill="rgb(250,160,47)" fg:x="34350" fg:w="4244"/><text x="72.7673%" y="287.50">cellular-auto..</text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_mut_slice (4,244 samples, 8.96%)</title><rect x="72.5173%" y="261" width="8.9596%" height="15" fill="rgb(216,222,40)" fg:x="34350" fg:w="4244"/><text x="72.7673%" y="271.50">cellular-auto..</text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_mut_ptr (4,160 samples, 8.78%)</title><rect x="72.6946%" y="245" width="8.7823%" height="15" fill="rgb(234,217,39)" fg:x="34434" fg:w="4160"/><text x="72.9446%" y="255.50">cellular-aut..</text></g><g><title>cellular-automaton.exe`core::slice::raw::from_raw_parts_mut::precondition_check(tuple$ (3,822 samples, 8.07%)</title><rect x="73.4082%" y="229" width="8.0687%" height="15" fill="rgb(207,178,40)" fg:x="34772" fg:w="3822"/><text x="73.6582%" y="239.50">cellular-au..</text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null(tuple$ (984 samples, 2.08%)</title><rect x="79.3996%" y="213" width="2.0774%" height="15" fill="rgb(221,136,13)" fg:x="37610" fg:w="984"/><text x="79.6496%" y="223.50">c..</text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null::runtime(tuple$ (976 samples, 2.06%)</title><rect x="79.4165%" y="197" width="2.0605%" height="15" fill="rgb(249,199,10)" fg:x="37618" fg:w="976"/><text x="79.6665%" y="207.50">c..</text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::is_aligned_to(tuple$ (837 samples, 1.77%)</title><rect x="79.7099%" y="181" width="1.7670%" height="15" fill="rgb(249,222,13)" fg:x="37757" fg:w="837"/><text x="79.9599%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::is_null::runtime (34 samples, 0.07%)</title><rect x="81.4052%" y="165" width="0.0718%" height="15" fill="rgb(244,185,38)" fg:x="38560" fg:w="34"/><text x="81.6552%" y="175.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::impl$14::index_mut&lt;cellular_automaton::cell::Cell,usize,alloc::alloc::Global&gt;(alloc::vec::Vec (4,870 samples, 10.28%)</title><rect x="72.0698%" y="293" width="10.2812%" height="15" fill="rgb(236,202,9)" fg:x="34138" fg:w="4870"/><text x="72.3198%" y="303.50">cellular-automa..</text></g><g><title>cellular-automaton.exe`core::slice::index::impl$2::index_mut&lt;cellular_automaton::cell::Cell&gt;(unsigned long long, ref_mut$&lt;slice2$ (414 samples, 0.87%)</title><rect x="81.4769%" y="277" width="0.8740%" height="15" fill="rgb(250,229,37)" fg:x="38594" fg:w="414"/><text x="81.7269%" y="287.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_ptr (26 samples, 0.05%)</title><rect x="82.4185%" y="261" width="0.0549%" height="15" fill="rgb(206,174,23)" fg:x="39040" fg:w="26"/><text x="82.6685%" y="271.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::ptr (6 samples, 0.01%)</title><rect x="82.4607%" y="245" width="0.0127%" height="15" fill="rgb(211,33,43)" fg:x="39060" fg:w="6"/><text x="82.7107%" y="255.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (6 samples, 0.01%)</title><rect x="82.4607%" y="229" width="0.0127%" height="15" fill="rgb(245,58,50)" fg:x="39060" fg:w="6"/><text x="82.7107%" y="239.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (6 samples, 0.01%)</title><rect x="82.4607%" y="213" width="0.0127%" height="15" fill="rgb(244,68,36)" fg:x="39060" fg:w="6"/><text x="82.7107%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::is_valid_allocation_size (143 samples, 0.30%)</title><rect x="82.5473%" y="245" width="0.3019%" height="15" fill="rgb(232,229,15)" fg:x="39101" fg:w="143"/><text x="82.7973%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::fmt::Arguments::new_const(ref$ (13 samples, 0.03%)</title><rect x="82.9125%" y="197" width="0.0274%" height="15" fill="rgb(254,30,23)" fg:x="39274" fg:w="13"/><text x="83.1625%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::is_power_of_two (51 samples, 0.11%)</title><rect x="82.9400%" y="197" width="0.1077%" height="15" fill="rgb(235,160,14)" fg:x="39287" fg:w="51"/><text x="83.1900%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::count_ones (51 samples, 0.11%)</title><rect x="82.9400%" y="181" width="0.1077%" height="15" fill="rgb(212,155,44)" fg:x="39287" fg:w="51"/><text x="83.1900%" y="191.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::impl$8::deref&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;(alloc::vec::Vec (332 samples, 0.70%)</title><rect x="82.3510%" y="293" width="0.7009%" height="15" fill="rgb(226,2,50)" fg:x="39008" fg:w="332"/><text x="82.6010%" y="303.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_slice&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt; (320 samples, 0.68%)</title><rect x="82.3763%" y="277" width="0.6756%" height="15" fill="rgb(234,177,6)" fg:x="39020" fg:w="320"/><text x="82.6263%" y="287.50"></text></g><g><title>cellular-automaton.exe`core::slice::raw::from_raw_parts::precondition_check(tuple$ (274 samples, 0.58%)</title><rect x="82.4734%" y="261" width="0.5784%" height="15" fill="rgb(217,24,9)" fg:x="39066" fg:w="274"/><text x="82.7234%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null(tuple$ (96 samples, 0.20%)</title><rect x="82.8492%" y="245" width="0.2027%" height="15" fill="rgb(220,13,46)" fg:x="39244" fg:w="96"/><text x="83.0992%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::ub_checks::maybe_is_aligned_and_not_null::runtime(tuple$ (94 samples, 0.20%)</title><rect x="82.8534%" y="229" width="0.1984%" height="15" fill="rgb(239,221,27)" fg:x="39246" fg:w="94"/><text x="83.1034%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::is_aligned_to(tuple$ (83 samples, 0.18%)</title><rect x="82.8766%" y="213" width="0.1752%" height="15" fill="rgb(222,198,25)" fg:x="39257" fg:w="83"/><text x="83.1266%" y="223.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::Cell::new (108 samples, 0.23%)</title><rect x="83.0518%" y="293" width="0.2280%" height="15" fill="rgb(211,99,13)" fg:x="39340" fg:w="108"/><text x="83.3018%" y="303.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::Cell::set_state (114 samples, 0.24%)</title><rect x="83.2799%" y="293" width="0.2407%" height="15" fill="rgb(232,111,31)" fg:x="39448" fg:w="114"/><text x="83.5299%" y="303.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::Cell::state (421 samples, 0.89%)</title><rect x="83.5205%" y="293" width="0.8888%" height="15" fill="rgb(245,82,37)" fg:x="39562" fg:w="421"/><text x="83.7705%" y="303.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::impl$0::not (1,348 samples, 2.85%)</title><rect x="84.4093%" y="293" width="2.8458%" height="15" fill="rgb(227,149,46)" fg:x="39983" fg:w="1348"/><text x="84.6593%" y="303.50">ce..</text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::Cell::new (885 samples, 1.87%)</title><rect x="85.3868%" y="277" width="1.8683%" height="15" fill="rgb(218,36,50)" fg:x="40446" fg:w="885"/><text x="85.6368%" y="287.50">c..</text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::impl$1::eq (705 samples, 1.49%)</title><rect x="87.2551%" y="293" width="1.4883%" height="15" fill="rgb(226,80,48)" fg:x="41331" fg:w="705"/><text x="87.5051%" y="303.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::impl$6::clone (778 samples, 1.64%)</title><rect x="88.7435%" y="293" width="1.6425%" height="15" fill="rgb(238,224,15)" fg:x="42036" fg:w="778"/><text x="88.9935%" y="303.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::pattern::Pattern::new(alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;, alloc::vec::Vec (36 samples, 0.08%)</title><rect x="90.3859%" y="293" width="0.0760%" height="15" fill="rgb(241,136,10)" fg:x="42814" fg:w="36"/><text x="90.6359%" y="303.50"></text></g><g><title>cellular-automaton.exe`core::cmp::impls::impl$58::lt (21 samples, 0.04%)</title><rect x="93.4513%" y="245" width="0.0443%" height="15" fill="rgb(208,32,45)" fg:x="44266" fg:w="21"/><text x="93.7013%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::iter::range::impl$43::backward_unchecked (500 samples, 1.06%)</title><rect x="93.4956%" y="245" width="1.0556%" height="15" fill="rgb(207,135,9)" fg:x="44287" fg:w="500"/><text x="93.7456%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::unchecked_sub (319 samples, 0.67%)</title><rect x="93.8777%" y="229" width="0.6735%" height="15" fill="rgb(206,86,44)" fg:x="44468" fg:w="319"/><text x="94.1277%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::unchecked_sub::precondition_check (165 samples, 0.35%)</title><rect x="94.2028%" y="213" width="0.3483%" height="15" fill="rgb(245,177,15)" fg:x="44622" fg:w="165"/><text x="94.4528%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::overflowing_sub (19 samples, 0.04%)</title><rect x="94.5111%" y="197" width="0.0401%" height="15" fill="rgb(206,64,50)" fg:x="44768" fg:w="19"/><text x="94.7611%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::ptr::read (99 samples, 0.21%)</title><rect x="94.5512%" y="229" width="0.2090%" height="15" fill="rgb(234,36,40)" fg:x="44787" fg:w="99"/><text x="94.8012%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::mem::replace (102 samples, 0.22%)</title><rect x="94.5512%" y="245" width="0.2153%" height="15" fill="rgb(213,64,8)" fg:x="44787" fg:w="102"/><text x="94.8012%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::iter::adapters::rev::impl$1::next&lt;core::ops::range::RangeInclusive&lt;usize&gt; &gt;(core::iter::adapters::rev::Rev&lt;core::ops::range::RangeInclusive (2,337 samples, 4.93%)</title><rect x="90.4619%" y="293" width="4.9337%" height="15" fill="rgb(210,75,36)" fg:x="42850" fg:w="2337"/><text x="90.7119%" y="303.50">cellul..</text></g><g><title>cellular-automaton.exe`core::iter::range::impl$16::next_back&lt;usize&gt;(core::ops::range::RangeInclusive (2,162 samples, 4.56%)</title><rect x="90.8314%" y="277" width="4.5643%" height="15" fill="rgb(229,88,21)" fg:x="43025" fg:w="2162"/><text x="91.0814%" y="287.50">cellu..</text></g><g><title>cellular-automaton.exe`core::iter::range::impl$14::spec_next_back&lt;usize&gt;(core::ops::range::RangeInclusive (1,914 samples, 4.04%)</title><rect x="91.3549%" y="261" width="4.0407%" height="15" fill="rgb(252,204,47)" fg:x="43273" fg:w="1914"/><text x="91.6049%" y="271.50">cell..</text></g><g><title>cellular-automaton.exe`core::ops::range::RangeInclusive&lt;usize&gt;::is_empty (298 samples, 0.63%)</title><rect x="94.7665%" y="245" width="0.6291%" height="15" fill="rgb(208,77,27)" fg:x="44889" fg:w="298"/><text x="95.0165%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::cmp::impls::impl$58::le (17 samples, 0.04%)</title><rect x="95.3597%" y="229" width="0.0359%" height="15" fill="rgb(221,76,26)" fg:x="45170" fg:w="17"/><text x="95.6097%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::iter::traits::collect::impl$0::into_iter&lt;core::iter::adapters::rev::Rev&lt;core::ops::range::RangeInclusive&lt;usize&gt; &gt; &gt;(core::iter::adapters::rev::Rev&lt;core::ops::range::RangeInclusive (6 samples, 0.01%)</title><rect x="95.3956%" y="293" width="0.0127%" height="15" fill="rgb(225,139,18)" fg:x="45187" fg:w="6"/><text x="95.6456%" y="303.50"></text></g><g><title>cellular-automaton.exe`core::iter::traits::iterator::Iterator::rev&lt;core::ops::range::RangeInclusive&lt;usize&gt; &gt;(core::ops::range::RangeInclusive (55 samples, 0.12%)</title><rect x="95.4083%" y="293" width="0.1161%" height="15" fill="rgb(230,137,11)" fg:x="45193" fg:w="55"/><text x="95.6583%" y="303.50"></text></g><g><title>cellular-automaton.exe`core::iter::adapters::rev::Rev&lt;core::ops::range::RangeInclusive&lt;usize&gt; &gt;::new(core::ops::range::RangeInclusive (49 samples, 0.10%)</title><rect x="95.4210%" y="277" width="0.1034%" height="15" fill="rgb(212,28,1)" fg:x="45199" fg:w="49"/><text x="95.6710%" y="287.50"></text></g><g><title>cellular-automaton.exe`core::ops::range::RangeInclusive&lt;usize&gt;::new&lt;usize&gt; (8 samples, 0.02%)</title><rect x="95.5244%" y="293" width="0.0169%" height="15" fill="rgb(248,164,17)" fg:x="45248" fg:w="8"/><text x="95.7744%" y="303.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;cellular_automaton::cell::Cell&gt;::as_ptr(core::ptr::non_null::NonNull (5 samples, 0.01%)</title><rect x="95.6215%" y="229" width="0.0106%" height="15" fill="rgb(222,171,42)" fg:x="45294" fg:w="5"/><text x="95.8715%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::slice::impl$0::iter(ref$&lt;slice2$ (19 samples, 0.04%)</title><rect x="95.6046%" y="261" width="0.0401%" height="15" fill="rgb(243,84,45)" fg:x="45286" fg:w="19"/><text x="95.8546%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt;::new(ref$&lt;slice2$ (19 samples, 0.04%)</title><rect x="95.6046%" y="245" width="0.0401%" height="15" fill="rgb(252,49,23)" fg:x="45286" fg:w="19"/><text x="95.8546%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::impl$20::from(ref$&lt;slice2$ (6 samples, 0.01%)</title><rect x="95.6321%" y="229" width="0.0127%" height="15" fill="rgb(215,19,7)" fg:x="45299" fg:w="6"/><text x="95.8821%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::slice::cmp::impl$15::slice_contains::closure$0&lt;cellular_automaton::cell::Cell&gt;(core::slice::cmp::impl$15::slice_contains::closure_env$0 (71 samples, 0.15%)</title><rect x="95.8706%" y="245" width="0.1499%" height="15" fill="rgb(238,81,41)" fg:x="45412" fg:w="71"/><text x="96.1206%" y="255.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::impl$1::eq (37 samples, 0.08%)</title><rect x="95.9424%" y="229" width="0.0781%" height="15" fill="rgb(210,199,37)" fg:x="45446" fg:w="37"/><text x="96.1924%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;cellular_automaton::cell::Cell&gt;*, core::ptr::non_null::NonNull (21 samples, 0.04%)</title><rect x="96.1197%" y="229" width="0.0443%" height="15" fill="rgb(244,192,49)" fg:x="45530" fg:w="21"/><text x="96.3697%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::slice::impl$0::contains&lt;cellular_automaton::cell::Cell&gt;(ref$&lt;slice2$ (321 samples, 0.68%)</title><rect x="95.5413%" y="293" width="0.6777%" height="15" fill="rgb(226,211,11)" fg:x="45256" fg:w="321"/><text x="95.7913%" y="303.50"></text></g><g><title>cellular-automaton.exe`core::slice::cmp::impl$15::slice_contains&lt;cellular_automaton::cell::Cell&gt;(cellular_automaton::cell::Cell*, ref$&lt;slice2$ (303 samples, 0.64%)</title><rect x="95.5793%" y="277" width="0.6397%" height="15" fill="rgb(236,162,54)" fg:x="45274" fg:w="303"/><text x="95.8293%" y="287.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::impl$182::any&lt;cellular_automaton::cell::Cell,core::slice::cmp::impl$15::slice_contains::closure_env$0&lt;cellular_automaton::cell::Cell&gt; &gt;(core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt;*, core::slice::cmp::impl$15::slice_contains::closure_env$0 (272 samples, 0.57%)</title><rect x="95.6447%" y="261" width="0.5742%" height="15" fill="rgb(220,229,9)" fg:x="45305" fg:w="272"/><text x="95.8947%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::impl$182::next&lt;cellular_automaton::cell::Cell&gt;(core::slice::iter::Iter (94 samples, 0.20%)</title><rect x="96.0205%" y="245" width="0.1984%" height="15" fill="rgb(250,87,22)" fg:x="45483" fg:w="94"/><text x="96.2705%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::impl$186::next_unchecked(core::slice::iter::Iter (26 samples, 0.05%)</title><rect x="96.1641%" y="229" width="0.0549%" height="15" fill="rgb(239,43,17)" fg:x="45551" fg:w="26"/><text x="96.4141%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt;::post_inc_start (24 samples, 0.05%)</title><rect x="96.1683%" y="213" width="0.0507%" height="15" fill="rgb(231,177,25)" fg:x="45553" fg:w="24"/><text x="96.4183%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;cellular_automaton::cell::Cell&gt;::as_ptr(core::ptr::non_null::NonNull (5 samples, 0.01%)</title><rect x="96.2717%" y="261" width="0.0106%" height="15" fill="rgb(219,179,1)" fg:x="45602" fg:w="5"/><text x="96.5217%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::slice::impl$0::iter&lt;cellular_automaton::cell::Cell&gt;(ref$&lt;slice2$ (31 samples, 0.07%)</title><rect x="96.2190%" y="293" width="0.0654%" height="15" fill="rgb(238,219,53)" fg:x="45577" fg:w="31"/><text x="96.4690%" y="303.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt;::new&lt;cellular_automaton::cell::Cell&gt;(ref$&lt;slice2$ (24 samples, 0.05%)</title><rect x="96.2337%" y="277" width="0.0507%" height="15" fill="rgb(232,167,36)" fg:x="45584" fg:w="24"/><text x="96.4837%" y="287.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::pattern::impl$1::next::closure$0 (78 samples, 0.16%)</title><rect x="96.8396%" y="277" width="0.1647%" height="15" fill="rgb(244,19,51)" fg:x="45871" fg:w="78"/><text x="97.0896%" y="287.50"></text></g><g><title>cellular-automaton.exe`core::cmp::impls::impl$9::eq&lt;cellular_automaton::cell::Cell,cellular_automaton::cell::Cell&gt; (49 samples, 0.10%)</title><rect x="96.9009%" y="261" width="0.1034%" height="15" fill="rgb(224,6,22)" fg:x="45900" fg:w="49"/><text x="97.1509%" y="271.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::cell::impl$1::eq (33 samples, 0.07%)</title><rect x="96.9346%" y="245" width="0.0697%" height="15" fill="rgb(224,145,5)" fg:x="45916" fg:w="33"/><text x="97.1846%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::hint::assert_unchecked::precondition_check (7 samples, 0.01%)</title><rect x="97.0064%" y="277" width="0.0148%" height="15" fill="rgb(234,130,49)" fg:x="45950" fg:w="7"/><text x="97.2564%" y="287.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;cellular_automaton::cell::Cell&gt;::sub_ptr&lt;cellular_automaton::cell::Cell&gt;(core::ptr::non_null::NonNull&lt;cellular_automaton::cell::Cell&gt;, core::ptr::non_null::NonNull (46 samples, 0.10%)</title><rect x="97.0212%" y="277" width="0.0971%" height="15" fill="rgb(254,6,2)" fg:x="45957" fg:w="46"/><text x="97.2712%" y="287.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;cellular_automaton::cell::Cell&gt;::as_ptr(core::ptr::non_null::NonNull (28 samples, 0.06%)</title><rect x="97.0592%" y="261" width="0.0591%" height="15" fill="rgb(208,96,46)" fg:x="45975" fg:w="28"/><text x="97.3092%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::sub_ptr (24 samples, 0.05%)</title><rect x="97.0676%" y="245" width="0.0507%" height="15" fill="rgb(239,3,39)" fg:x="45979" fg:w="24"/><text x="97.3176%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::mem::size_of (13 samples, 0.03%)</title><rect x="97.0909%" y="229" width="0.0274%" height="15" fill="rgb(233,210,1)" fg:x="45990" fg:w="13"/><text x="97.3409%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::ptr::const_ptr::impl$0::sub_ptr::precondition_check(tuple$&lt;&gt;*, tuple$ (11 samples, 0.02%)</title><rect x="97.0951%" y="213" width="0.0232%" height="15" fill="rgb(244,137,37)" fg:x="45992" fg:w="11"/><text x="97.3451%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::impl$14::eq(core::ptr::non_null::NonNull&lt;cellular_automaton::cell::Cell&gt;*, core::ptr::non_null::NonNull (19 samples, 0.04%)</title><rect x="97.2999%" y="261" width="0.0401%" height="15" fill="rgb(240,136,2)" fg:x="46089" fg:w="19"/><text x="97.5499%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::impl$182::rposition&lt;cellular_automaton::cell::Cell,cellular_automaton::pattern::impl$1::next::closure_env$0&gt;(core::slice::iter::Iter (585 samples, 1.24%)</title><rect x="96.2844%" y="293" width="1.2350%" height="15" fill="rgb(239,18,37)" fg:x="45608" fg:w="585"/><text x="96.5344%" y="303.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::impl$183::next_back&lt;cellular_automaton::cell::Cell&gt;(core::slice::iter::Iter (190 samples, 0.40%)</title><rect x="97.1183%" y="277" width="0.4011%" height="15" fill="rgb(218,185,22)" fg:x="46003" fg:w="190"/><text x="97.3683%" y="287.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt;::next_back_unchecked (85 samples, 0.18%)</title><rect x="97.3400%" y="261" width="0.1794%" height="15" fill="rgb(225,218,4)" fg:x="46108" fg:w="85"/><text x="97.5900%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::slice::iter::Iter&lt;cellular_automaton::cell::Cell&gt;::pre_dec_end (76 samples, 0.16%)</title><rect x="97.3590%" y="245" width="0.1604%" height="15" fill="rgb(230,182,32)" fg:x="46117" fg:w="76"/><text x="97.6090%" y="255.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;cellular_automaton::cell::Cell&gt;::sub(core::ptr::non_null::NonNull (44 samples, 0.09%)</title><rect x="97.4265%" y="229" width="0.0929%" height="15" fill="rgb(242,56,43)" fg:x="46149" fg:w="44"/><text x="97.6765%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$5::unchecked_neg (36 samples, 0.08%)</title><rect x="97.4434%" y="213" width="0.0760%" height="15" fill="rgb(233,99,24)" fg:x="46157" fg:w="36"/><text x="97.6934%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$5::unchecked_neg::precondition_check (24 samples, 0.05%)</title><rect x="97.4688%" y="197" width="0.0507%" height="15" fill="rgb(234,209,42)" fg:x="46169" fg:w="24"/><text x="97.7188%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$5::overflowing_neg (7 samples, 0.01%)</title><rect x="97.5046%" y="181" width="0.0148%" height="15" fill="rgb(227,7,12)" fg:x="46186" fg:w="7"/><text x="97.7546%" y="191.50"></text></g><g><title>cellular-automaton.exe`cellular_automaton::pattern::Pattern::next(enum2$&lt;core::option::Option&lt;ref$ (45,028 samples, 95.06%)</title><rect x="2.5101%" y="309" width="95.0600%" height="15" fill="rgb(245,203,43)" fg:x="1189" fg:w="45028"/><text x="2.7601%" y="319.50">cellular-automaton.exe`cellular_automaton::pattern::Pattern::next(enum2$&lt;core::option::Option&lt;ref$</text></g><g><title>cellular-automaton.exe`enum2$&lt;core::option::Option&lt;usize&gt; &gt;::unwrap(enum2$&lt;core::option::Option (24 samples, 0.05%)</title><rect x="97.5194%" y="293" width="0.0507%" height="15" fill="rgb(238,205,33)" fg:x="46193" fg:w="24"/><text x="97.7694%" y="303.50"></text></g><g><title>cellular-automaton.exe`core::iter::range::impl$6::next&lt;i32&gt;(core::ops::range::Range (98 samples, 0.21%)</title><rect x="97.5701%" y="309" width="0.2069%" height="15" fill="rgb(231,56,7)" fg:x="46217" fg:w="98"/><text x="97.8201%" y="319.50"></text></g><g><title>cellular-automaton.exe`core::iter::range::impl$5::spec_next&lt;i32&gt;(core::ops::range::Range (83 samples, 0.18%)</title><rect x="97.6018%" y="293" width="0.1752%" height="15" fill="rgb(244,186,29)" fg:x="46232" fg:w="83"/><text x="97.8518%" y="303.50"></text></g><g><title>cellular-automaton.exe`core::iter::range::impl$40::forward_unchecked (38 samples, 0.08%)</title><rect x="97.6968%" y="277" width="0.0802%" height="15" fill="rgb(234,111,31)" fg:x="46277" fg:w="38"/><text x="97.9468%" y="287.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$2::checked_add_unsigned (22 samples, 0.05%)</title><rect x="97.7305%" y="261" width="0.0464%" height="15" fill="rgb(241,149,10)" fg:x="46293" fg:w="22"/><text x="97.9805%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$2::overflowing_add_unsigned (12 samples, 0.03%)</title><rect x="97.7516%" y="245" width="0.0253%" height="15" fill="rgb(249,206,44)" fg:x="46303" fg:w="12"/><text x="98.0016%" y="255.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::impl$25::drop&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;(alloc::vec::Vec (22 samples, 0.05%)</title><rect x="97.8804%" y="277" width="0.0464%" height="15" fill="rgb(251,153,30)" fg:x="46364" fg:w="22"/><text x="98.1304%" y="287.50"></text></g><g><title>cellular-automaton.exe`alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::as_mut_ptr (5 samples, 0.01%)</title><rect x="97.9163%" y="261" width="0.0106%" height="15" fill="rgb(239,152,38)" fg:x="46381" fg:w="5"/><text x="98.1663%" y="271.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;::ptr (5 samples, 0.01%)</title><rect x="97.9163%" y="245" width="0.0106%" height="15" fill="rgb(249,139,47)" fg:x="46381" fg:w="5"/><text x="98.1663%" y="255.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::ptr (5 samples, 0.01%)</title><rect x="97.9163%" y="229" width="0.0106%" height="15" fill="rgb(244,64,35)" fg:x="46381" fg:w="5"/><text x="98.1663%" y="239.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::non_null (5 samples, 0.01%)</title><rect x="97.9163%" y="213" width="0.0106%" height="15" fill="rgb(216,46,15)" fg:x="46381" fg:w="5"/><text x="98.1663%" y="223.50"></text></g><g><title>`0x7FF9ADE94980 (11 samples, 0.02%)</title><rect x="98.1865%" y="213" width="0.0232%" height="15" fill="rgb(250,74,19)" fg:x="46509" fg:w="11"/><text x="98.4365%" y="223.50"></text></g><g><title>`0x7FF9AE9753C0 (14 samples, 0.03%)</title><rect x="98.2098%" y="213" width="0.0296%" height="15" fill="rgb(249,42,33)" fg:x="46520" fg:w="14"/><text x="98.4598%" y="223.50"></text></g><g><title>`0x7FF9AE9753D5 (5 samples, 0.01%)</title><rect x="98.2625%" y="213" width="0.0106%" height="15" fill="rgb(242,149,17)" fg:x="46545" fg:w="5"/><text x="98.5125%" y="223.50"></text></g><g><title>`0x7FF9AE9753D9 (6 samples, 0.01%)</title><rect x="98.2773%" y="213" width="0.0127%" height="15" fill="rgb(244,29,21)" fg:x="46552" fg:w="6"/><text x="98.5273%" y="223.50"></text></g><g><title>`0x7FF9AE97545A (5 samples, 0.01%)</title><rect x="98.3702%" y="213" width="0.0106%" height="15" fill="rgb(220,130,37)" fg:x="46596" fg:w="5"/><text x="98.6202%" y="223.50"></text></g><g><title>`0x7FF9AE97549A (5 samples, 0.01%)</title><rect x="98.4103%" y="213" width="0.0106%" height="15" fill="rgb(211,67,2)" fg:x="46615" fg:w="5"/><text x="98.6603%" y="223.50"></text></g><g><title>`0x7FF9AE97549D (47 samples, 0.10%)</title><rect x="98.4209%" y="213" width="0.0992%" height="15" fill="rgb(235,68,52)" fg:x="46620" fg:w="47"/><text x="98.6709%" y="223.50"></text></g><g><title>`0x7FF9AE9754A1 (22 samples, 0.05%)</title><rect x="98.5201%" y="213" width="0.0464%" height="15" fill="rgb(246,142,3)" fg:x="46667" fg:w="22"/><text x="98.7701%" y="223.50"></text></g><g><title>`0x7FF9AE9754B4 (28 samples, 0.06%)</title><rect x="98.5813%" y="213" width="0.0591%" height="15" fill="rgb(241,25,7)" fg:x="46696" fg:w="28"/><text x="98.8313%" y="223.50"></text></g><g><title>`0x7FF9AE9754B8 (28 samples, 0.06%)</title><rect x="98.6404%" y="213" width="0.0591%" height="15" fill="rgb(242,119,39)" fg:x="46724" fg:w="28"/><text x="98.8904%" y="223.50"></text></g><g><title>`0x7FF9AE9754C2 (5 samples, 0.01%)</title><rect x="98.7038%" y="213" width="0.0106%" height="15" fill="rgb(241,98,45)" fg:x="46754" fg:w="5"/><text x="98.9538%" y="223.50"></text></g><g><title>`0x7FF9AE9754CA (6 samples, 0.01%)</title><rect x="98.7185%" y="213" width="0.0127%" height="15" fill="rgb(254,28,30)" fg:x="46761" fg:w="6"/><text x="98.9685%" y="223.50"></text></g><g><title>`0x7FF9AE9754CE (15 samples, 0.03%)</title><rect x="98.7312%" y="213" width="0.0317%" height="15" fill="rgb(241,142,54)" fg:x="46767" fg:w="15"/><text x="98.9812%" y="223.50"></text></g><g><title>`0x7FF9AE9754D7 (8 samples, 0.02%)</title><rect x="98.7650%" y="213" width="0.0169%" height="15" fill="rgb(222,85,15)" fg:x="46783" fg:w="8"/><text x="99.0150%" y="223.50"></text></g><g><title>`0x7FF9AE9754FE (7 samples, 0.01%)</title><rect x="98.7882%" y="213" width="0.0148%" height="15" fill="rgb(210,85,47)" fg:x="46794" fg:w="7"/><text x="99.0382%" y="223.50"></text></g><g><title>`0x7FF9AE97550F (7 samples, 0.01%)</title><rect x="98.8030%" y="213" width="0.0148%" height="15" fill="rgb(224,206,25)" fg:x="46801" fg:w="7"/><text x="99.0530%" y="223.50"></text></g><g><title>`0x7FF9AE97551F (6 samples, 0.01%)</title><rect x="98.8178%" y="213" width="0.0127%" height="15" fill="rgb(243,201,19)" fg:x="46808" fg:w="6"/><text x="99.0678%" y="223.50"></text></g><g><title>`0x7FF9AE97552A (8 samples, 0.02%)</title><rect x="98.8304%" y="213" width="0.0169%" height="15" fill="rgb(236,59,4)" fg:x="46814" fg:w="8"/><text x="99.0804%" y="223.50"></text></g><g><title>`0x7FF9AE975536 (7 samples, 0.01%)</title><rect x="98.8473%" y="213" width="0.0148%" height="15" fill="rgb(254,179,45)" fg:x="46822" fg:w="7"/><text x="99.0973%" y="223.50"></text></g><g><title>`0x7FF9AE975543 (89 samples, 0.19%)</title><rect x="98.8621%" y="213" width="0.1879%" height="15" fill="rgb(226,14,10)" fg:x="46829" fg:w="89"/><text x="99.1121%" y="223.50"></text></g><g><title>`0x7FF9AE97558F (8 samples, 0.02%)</title><rect x="99.0563%" y="213" width="0.0169%" height="15" fill="rgb(244,27,41)" fg:x="46921" fg:w="8"/><text x="99.3063%" y="223.50"></text></g><g><title>`0x7FF9AE9755AB (8 samples, 0.02%)</title><rect x="99.0732%" y="213" width="0.0169%" height="15" fill="rgb(235,35,32)" fg:x="46929" fg:w="8"/><text x="99.3232%" y="223.50"></text></g><g><title>`0x7FF9AE9755B9 (7 samples, 0.01%)</title><rect x="99.0901%" y="213" width="0.0148%" height="15" fill="rgb(218,68,31)" fg:x="46937" fg:w="7"/><text x="99.3401%" y="223.50"></text></g><g><title>`0x7FF9AE9755BE (15 samples, 0.03%)</title><rect x="99.1049%" y="213" width="0.0317%" height="15" fill="rgb(207,120,37)" fg:x="46944" fg:w="15"/><text x="99.3549%" y="223.50"></text></g><g><title>`0x7FF9AE97564A (5 samples, 0.01%)</title><rect x="99.1365%" y="213" width="0.0106%" height="15" fill="rgb(227,98,0)" fg:x="46959" fg:w="5"/><text x="99.3865%" y="223.50"></text></g><g><title>`0x7FF9AE975656 (5 samples, 0.01%)</title><rect x="99.1555%" y="213" width="0.0106%" height="15" fill="rgb(207,7,3)" fg:x="46968" fg:w="5"/><text x="99.4055%" y="223.50"></text></g><g><title>`0x7FF9AE975659 (9 samples, 0.02%)</title><rect x="99.1661%" y="213" width="0.0190%" height="15" fill="rgb(206,98,19)" fg:x="46973" fg:w="9"/><text x="99.4161%" y="223.50"></text></g><g><title>`0x7FF9AE975744 (6 samples, 0.01%)</title><rect x="99.1851%" y="213" width="0.0127%" height="15" fill="rgb(217,5,26)" fg:x="46982" fg:w="6"/><text x="99.4351%" y="223.50"></text></g><g><title>`0x7FF9AE975748 (17 samples, 0.04%)</title><rect x="99.1978%" y="213" width="0.0359%" height="15" fill="rgb(235,190,38)" fg:x="46988" fg:w="17"/><text x="99.4478%" y="223.50"></text></g><g><title>`0x7FF9AE975752 (5 samples, 0.01%)</title><rect x="99.2337%" y="213" width="0.0106%" height="15" fill="rgb(247,86,24)" fg:x="47005" fg:w="5"/><text x="99.4837%" y="223.50"></text></g><g><title>`0x7FF9AE97575E (10 samples, 0.02%)</title><rect x="99.2442%" y="213" width="0.0211%" height="15" fill="rgb(205,101,16)" fg:x="47010" fg:w="10"/><text x="99.4942%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::size (5 samples, 0.01%)</title><rect x="99.2801%" y="213" width="0.0106%" height="15" fill="rgb(246,168,33)" fg:x="47027" fg:w="5"/><text x="99.5301%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::ptr::non_null::NonNull&lt;u8&gt;::as_ptr(core::ptr::non_null::NonNull (29 samples, 0.06%)</title><rect x="99.2907%" y="213" width="0.0612%" height="15" fill="rgb(231,114,1)" fg:x="47032" fg:w="29"/><text x="99.5407%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::align (14 samples, 0.03%)</title><rect x="99.3223%" y="197" width="0.0296%" height="15" fill="rgb(207,184,53)" fg:x="47047" fg:w="14"/><text x="99.5723%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::ptr::alignment::Alignment::as_usize (13 samples, 0.03%)</title><rect x="99.3244%" y="181" width="0.0274%" height="15" fill="rgb(224,95,51)" fg:x="47048" fg:w="13"/><text x="99.5744%" y="191.50"></text></g><g><title>`0x7FF9ADE93F90 (11 samples, 0.02%)</title><rect x="99.4194%" y="181" width="0.0232%" height="15" fill="rgb(212,188,45)" fg:x="47093" fg:w="11"/><text x="99.6694%" y="191.50"></text></g><g><title>cellular-automaton.exe`alloc::alloc::impl$1::deallocate(alloc::alloc::Global*, core::ptr::non_null::NonNull (629 samples, 1.33%)</title><rect x="98.1190%" y="229" width="1.3279%" height="15" fill="rgb(223,154,38)" fg:x="46477" fg:w="629"/><text x="98.3690%" y="239.50"></text></g><g><title>cellular-automaton.exe`std::alloc::__default_lib_allocator::__rdl_dealloc (45 samples, 0.10%)</title><rect x="99.3519%" y="213" width="0.0950%" height="15" fill="rgb(251,22,52)" fg:x="47061" fg:w="45"/><text x="99.6019%" y="223.50"></text></g><g><title>cellular-automaton.exe`std::sys::alloc::windows::impl$0::dealloc (29 samples, 0.06%)</title><rect x="99.3857%" y="197" width="0.0612%" height="15" fill="rgb(229,209,22)" fg:x="47077" fg:w="29"/><text x="99.6357%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::impl$0::from_size_align_unchecked::precondition_check (71 samples, 0.15%)</title><rect x="99.6833%" y="197" width="0.1499%" height="15" fill="rgb(234,138,34)" fg:x="47218" fg:w="71"/><text x="99.9333%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::is_size_align_valid (17 samples, 0.04%)</title><rect x="99.7973%" y="181" width="0.0359%" height="15" fill="rgb(212,95,11)" fg:x="47272" fg:w="17"/><text x="100.0473%" y="191.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::align (103 samples, 0.22%)</title><rect x="99.6284%" y="213" width="0.2174%" height="15" fill="rgb(240,179,47)" fg:x="47192" fg:w="103"/><text x="99.8784%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::ptr::alignment::Alignment::as_usize (6 samples, 0.01%)</title><rect x="99.8332%" y="197" width="0.0127%" height="15" fill="rgb(240,163,11)" fg:x="47289" fg:w="6"/><text x="100.0832%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::alloc::layout::Layout::size (21 samples, 0.04%)</title><rect x="99.8459%" y="213" width="0.0443%" height="15" fill="rgb(236,37,12)" fg:x="47295" fg:w="21"/><text x="100.0959%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::ptr::drop_in_place&lt;cellular_automaton::pattern::Pattern&gt; (1,039 samples, 2.19%)</title><rect x="97.7770%" y="309" width="2.1935%" height="15" fill="rgb(232,164,16)" fg:x="46315" fg:w="1039"/><text x="98.0270%" y="319.50">c..</text></g><g><title>cellular-automaton.exe`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt; &gt;(alloc::vec::Vec (1,021 samples, 2.16%)</title><rect x="97.8150%" y="293" width="2.1555%" height="15" fill="rgb(244,205,15)" fg:x="46333" fg:w="1021"/><text x="98.0650%" y="303.50">c..</text></g><g><title>cellular-automaton.exe`core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt; &gt;(alloc::raw_vec::RawVec (968 samples, 2.04%)</title><rect x="97.9269%" y="277" width="2.0436%" height="15" fill="rgb(223,117,47)" fg:x="46386" fg:w="968"/><text x="98.1769%" y="287.50">c..</text></g><g><title>cellular-automaton.exe`alloc::raw_vec::impl$3::drop&lt;cellular_automaton::cell::Cell,alloc::alloc::Global&gt;(alloc::raw_vec::RawVec (951 samples, 2.01%)</title><rect x="97.9628%" y="261" width="2.0077%" height="15" fill="rgb(244,107,35)" fg:x="46403" fg:w="951"/><text x="98.2128%" y="271.50">c..</text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::deallocate&lt;alloc::alloc::Global&gt; (929 samples, 1.96%)</title><rect x="98.0092%" y="245" width="1.9612%" height="15" fill="rgb(205,140,8)" fg:x="46425" fg:w="929"/><text x="98.2592%" y="255.50">c..</text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner&lt;alloc::alloc::Global&gt;::current_memory&lt;alloc::alloc::Global&gt; (248 samples, 0.52%)</title><rect x="99.4469%" y="229" width="0.5236%" height="15" fill="rgb(228,84,46)" fg:x="47106" fg:w="248"/><text x="99.6969%" y="239.50"></text></g><g><title>cellular-automaton.exe`core::num::niche_types::UsizeNoHighBit::as_inner (38 samples, 0.08%)</title><rect x="99.8902%" y="213" width="0.0802%" height="15" fill="rgb(254,188,9)" fg:x="47316" fg:w="38"/><text x="100.1402%" y="223.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::unchecked_mul::precondition_check (18 samples, 0.04%)</title><rect x="99.9324%" y="197" width="0.0380%" height="15" fill="rgb(206,112,54)" fg:x="47336" fg:w="18"/><text x="100.1824%" y="207.50"></text></g><g><title>cellular-automaton.exe`core::num::impl$11::overflowing_mul (9 samples, 0.02%)</title><rect x="99.9514%" y="181" width="0.0190%" height="15" fill="rgb(216,84,49)" fg:x="47345" fg:w="9"/><text x="100.2014%" y="191.50"></text></g><g><title>cellular-automaton.exe`memcpy (6 samples, 0.01%)</title><rect x="99.9704%" y="309" width="0.0127%" height="15" fill="rgb(214,194,35)" fg:x="47354" fg:w="6"/><text x="100.2204%" y="319.50"></text></g><g><title>cellular-automaton.exe`core::ptr::drop_in_place (6 samples, 0.01%)</title><rect x="99.9831%" y="261" width="0.0127%" height="15" fill="rgb(249,28,3)" fg:x="47360" fg:w="6"/><text x="100.2331%" y="271.50"></text></g><g><title>cellular-automaton.exe`core::ptr::drop_in_place (6 samples, 0.01%)</title><rect x="99.9831%" y="245" width="0.0127%" height="15" fill="rgb(222,56,52)" fg:x="47360" fg:w="6"/><text x="100.2331%" y="255.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::impl$3::drop (6 samples, 0.01%)</title><rect x="99.9831%" y="229" width="0.0127%" height="15" fill="rgb(245,217,50)" fg:x="47360" fg:w="6"/><text x="100.2331%" y="239.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner::deallocate (6 samples, 0.01%)</title><rect x="99.9831%" y="213" width="0.0127%" height="15" fill="rgb(213,201,24)" fg:x="47360" fg:w="6"/><text x="100.2331%" y="223.50"></text></g><g><title>cellular-automaton.exe`alloc::raw_vec::RawVecInner::current_memory (6 samples, 0.01%)</title><rect x="99.9831%" y="197" width="0.0127%" height="15" fill="rgb(248,116,28)" fg:x="47360" fg:w="6"/><text x="100.2331%" y="207.50"></text></g><g><title>cellular-automaton.exe`std::sys::pal::windows::fs::File::open_native (6 samples, 0.01%)</title><rect x="99.9831%" y="181" width="0.0127%" height="15" fill="rgb(219,72,43)" fg:x="47360" fg:w="6"/><text x="100.2331%" y="191.50"></text></g><g><title>cellular-automaton.exe`__scrt_common_main_seh() (47,304 samples, 99.86%)</title><rect x="0.1330%" y="517" width="99.8649%" height="15" fill="rgb(209,138,14)" fg:x="63" fg:w="47304"/><text x="0.3830%" y="527.50">cellular-automaton.exe`__scrt_common_main_seh()</text></g><g><title>cellular-automaton.exe`invoke_main() (47,293 samples, 99.84%)</title><rect x="0.1562%" y="501" width="99.8417%" height="15" fill="rgb(222,18,33)" fg:x="74" fg:w="47293"/><text x="0.4062%" y="511.50">cellular-automaton.exe`invoke_main()</text></g><g><title>cellular-automaton.exe`main (47,293 samples, 99.84%)</title><rect x="0.1562%" y="485" width="99.8417%" height="15" fill="rgb(213,199,7)" fg:x="74" fg:w="47293"/><text x="0.4062%" y="495.50">cellular-automaton.exe`main</text></g><g><title>cellular-automaton.exe`std::rt::lang_start&lt;tuple$&lt;&gt; &gt;(void (*) (47,293 samples, 99.84%)</title><rect x="0.1562%" y="469" width="99.8417%" height="15" fill="rgb(250,110,10)" fg:x="74" fg:w="47293"/><text x="0.4062%" y="479.50">cellular-automaton.exe`std::rt::lang_start&lt;tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>cellular-automaton.exe`std::rt::lang_start_internal (47,293 samples, 99.84%)</title><rect x="0.1562%" y="453" width="99.8417%" height="15" fill="rgb(248,123,6)" fg:x="74" fg:w="47293"/><text x="0.4062%" y="463.50">cellular-automaton.exe`std::rt::lang_start_internal</text></g><g><title>cellular-automaton.exe`std::panic::catch_unwind (47,293 samples, 99.84%)</title><rect x="0.1562%" y="437" width="99.8417%" height="15" fill="rgb(206,91,31)" fg:x="74" fg:w="47293"/><text x="0.4062%" y="447.50">cellular-automaton.exe`std::panic::catch_unwind</text></g><g><title>cellular-automaton.exe`std::panicking::try (47,293 samples, 99.84%)</title><rect x="0.1562%" y="421" width="99.8417%" height="15" fill="rgb(211,154,13)" fg:x="74" fg:w="47293"/><text x="0.4062%" y="431.50">cellular-automaton.exe`std::panicking::try</text></g><g><title>cellular-automaton.exe`std::panicking::try::do_call (47,293 samples, 99.84%)</title><rect x="0.1562%" y="405" width="99.8417%" height="15" fill="rgb(225,148,7)" fg:x="74" fg:w="47293"/><text x="0.4062%" y="415.50">cellular-automaton.exe`std::panicking::try::do_call</text></g><g><title>cellular-automaton.exe`std::rt::lang_start_internal::closure$0 (47,293 samples, 99.84%)</title><rect x="0.1562%" y="389" width="99.8417%" height="15" fill="rgb(220,160,43)" fg:x="74" fg:w="47293"/><text x="0.4062%" y="399.50">cellular-automaton.exe`std::rt::lang_start_internal::closure$0</text></g><g><title>cellular-automaton.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$ (47,290 samples, 99.84%)</title><rect x="0.1626%" y="373" width="99.8353%" height="15" fill="rgb(213,52,39)" fg:x="77" fg:w="47290"/><text x="0.4126%" y="383.50">cellular-automaton.exe`std::rt::lang_start::closure$0&lt;tuple$&lt;&gt; &gt;(std::rt::lang_start::closure_env$0&lt;tuple$</text></g><g><title>cellular-automaton.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (47,290 samples, 99.84%)</title><rect x="0.1626%" y="357" width="99.8353%" height="15" fill="rgb(243,137,7)" fg:x="77" fg:w="47290"/><text x="0.4126%" y="367.50">cellular-automaton.exe`std::sys::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>cellular-automaton.exe`core::ops::function::FnOnce::call_once&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*) (47,290 samples, 99.84%)</title><rect x="0.1626%" y="341" width="99.8353%" height="15" fill="rgb(230,79,13)" fg:x="77" fg:w="47290"/><text x="0.4126%" y="351.50">cellular-automaton.exe`core::ops::function::FnOnce::call_once&lt;void (*)(),tuple$&lt;&gt; &gt;(void (*)</text></g><g><title>cellular-automaton.exe`cellular_automaton::main (47,290 samples, 99.84%)</title><rect x="0.1626%" y="325" width="99.8353%" height="15" fill="rgb(247,105,23)" fg:x="77" fg:w="47290"/><text x="0.4126%" y="335.50">cellular-automaton.exe`cellular_automaton::main</text></g><g><title>cellular-automaton.exe`std::fs::OpenOptions::open&lt;ref$&lt;str$&gt; &gt;(ref$ (7 samples, 0.01%)</title><rect x="99.9831%" y="309" width="0.0148%" height="15" fill="rgb(223,179,41)" fg:x="47360" fg:w="7"/><text x="100.2331%" y="319.50"></text></g><g><title>cellular-automaton.exe`std::fs::OpenOptions::_open (7 samples, 0.01%)</title><rect x="99.9831%" y="293" width="0.0148%" height="15" fill="rgb(218,9,34)" fg:x="47360" fg:w="7"/><text x="100.2331%" y="303.50"></text></g><g><title>cellular-automaton.exe`std::sys::pal::windows::fs::File::open (7 samples, 0.01%)</title><rect x="99.9831%" y="277" width="0.0148%" height="15" fill="rgb(222,106,8)" fg:x="47360" fg:w="7"/><text x="100.2331%" y="287.50"></text></g><g><title>all (47,368 samples, 100%)</title><rect x="0.0000%" y="565" width="100.0000%" height="15" fill="rgb(211,220,0)" fg:x="0" fg:w="47368"/><text x="0.2500%" y="575.50"></text></g><g><title>`0x7FF9AE91C34C (47,310 samples, 99.88%)</title><rect x="0.1224%" y="549" width="99.8776%" height="15" fill="rgb(229,52,16)" fg:x="58" fg:w="47310"/><text x="0.3724%" y="559.50">`0x7FF9AE91C34C</text></g><g><title>`0x7FF9ADE9E8D7 (47,310 samples, 99.88%)</title><rect x="0.1224%" y="533" width="99.8776%" height="15" fill="rgb(212,155,18)" fg:x="58" fg:w="47310"/><text x="0.3724%" y="543.50">`0x7FF9ADE9E8D7</text></g></svg></svg>